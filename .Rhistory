rts = rnorm(n = N, mean = 400, sd = 20),
response = sample(
c('correct', 'incorrect', 'tooslow'),
size = N,
replace = TRUE
),
color = sample(c('red', 'green'), size = N, replace = TRUE),
valence = sample(c('positive', 'negative'), size = N, replace = TRUE)
)
View(subject_x)
sub_dat = data.frame(
rts = rnorm(n = N, mean = 400, sd = 20),
response = sample(
c('correct', 'correct', 'correct', 'incorrect', 'tooslow'),
size = N,
replace = TRUE
),
color = sample(c('red', 'green'), size = N, replace = TRUE),
valence = sample(
c('positive', 'negative'),
size = N,
replace = TRUE
)
)
sub_dat = data.frame(
rt = rnorm(n = N, mean = 400, sd = 20),
response = sample(
c('correct', 'correct', 'correct', 'incorrect', 'tooslow'),
size = N,
replace = TRUE
),
color = sample(c('red', 'green'), size = N, replace = TRUE),
valence = sample(
c('positive', 'negative'),
size = N,
replace = TRUE
)
)
sample(c('red', 'green'))
sample(c('red', 'green'), 1)
sample(c('red', 'green'), 1)
sample(c('red', 'green'), 1)
sample(c('red', 'green'), 1)
sample(c('red', 'green'), 1)
sub_dat = data.frame(
rt = rnorm(n = N, mean = 400, sd = 20),
response = sample(
c('correct', 'correct', 'correct', 'incorrect', 'tooslow'),
size = N,
replace = TRUE
),
color = sample(c('red', 'green'), size = N, replace = TRUE),
valence = sample(
c('positive', 'negative'),
size = N,
replace = TRUE
),
sub_dat$group = sample(c('fullvision', 'colorblind'), 1)
)
sub_dat = data.frame(
rt = rnorm(n = N, mean = 400, sd = 20),
response = sample(
c('correct', 'correct', 'correct', 'incorrect', 'tooslow'),
size = N,
replace = TRUE
),
color = sample(c('red', 'green'), size = N, replace = TRUE),
valence = sample(
c('positive', 'negative'),
size = N,
replace = TRUE
),
)
sub_dat = data.frame(
rt = rnorm(n = N, mean = 400, sd = 20),
response = sample(
c('correct', 'correct', 'correct', 'incorrect', 'tooslow'),
size = N,
replace = TRUE
),
color = sample(c('red', 'green'), size = N, replace = TRUE),
valence = sample(
c('positive', 'negative'),
size = N,
replace = TRUE
)
)
sub_dat$group = sample(c('fullvision', 'colorblind'), 1)
sub_dat = data.frame(
rt = rnorm(n = N, mean = 400, sd = 20),
response = sample(
c('correct', 'correct', 'correct', 'incorrect', 'tooslow'),
size = N,
replace = TRUE
),
color = sample(c('red', 'green'), size = N, replace = TRUE),
valence = sample(
c('positive', 'negative'),
size = N,
replace = TRUE
),
group = sample(c('fullvision', 'colorblind'), 1)
)
View(sub_dat)
sub_dat = data.frame(
rt = rnorm(n = N, mean = 400, sd = 20),
response = sample(
c('correct', 'correct', 'correct', 'incorrect', 'tooslow'),
size = N,
replace = TRUE
),
color = sample(c('red', 'green'), size = N, replace = TRUE),
valence = sample(
c('positive', 'negative'),
size = N,
replace = TRUE
),
group = sample(c('fullvision', 'colorblind'), 1)
)
sub_dat = data.frame(
rt = rnorm(n = N, mean = 400, sd = 20),
response = sample(
c('correct', 'correct', 'correct', 'incorrect', 'tooslow'),
size = N,
replace = TRUE
),
color = sample(c('red', 'green'), size = N, replace = TRUE),
valence = sample(
c('positive', 'negative'),
size = N,
replace = TRUE
),
group = sample(c('fullvision', 'colorblind'), 1)
)
sub_dat = data.frame(
rt = rnorm(n = N, mean = 400, sd = 20),
response = sample(
c('correct', 'correct', 'correct', 'incorrect', 'tooslow'),
size = N,
replace = TRUE
),
color = sample(c('red', 'green'), size = N, replace = TRUE),
valence = sample(
c('positive', 'negative'),
size = N,
replace = TRUE
),
group = sample(c('fullvision', 'colorblind'), 1)
)
sub_dat = data.frame(
rt = rnorm(n = N, mean = 400, sd = 20),
response = sample(
c('correct', 'correct', 'correct', 'incorrect', 'tooslow'),
size = N,
replace = TRUE
),
color = sample(c('red', 'green'), size = N, replace = TRUE),
valence = sample(
c('positive', 'negative'),
size = N,
replace = TRUE
),
group = sample(c('fullvision', 'colorblind'), 1)
)
sub_dat$rt[sub_dat$color == 'green' & sub_dat$valence == 'negative'] = sub_dat$rt[sub_dat$color == 'green' & sub_dat$valence == 'positive'] + rnorm(n = N, mean = 20, sd = 20)
green_neg = sub_dat$color == 'green' & sub_dat$valence == 'negative'
green_neg
length(sub_dat$rt[green_neg])
sub_dat$rt[green_neg] = sub_dat$rt[green_neg] + rnorm(n = length(sub_dat$rt[green_neg]), mean = 20, sd = 20)
sub_dat$group[1]
sub_dat$group[1] == 'fullvision'
neg
if (sub_dat$group[1] == 'fullvision') {
green_neg = (sub_dat$color == 'green' & sub_dat$valence == 'negative')
sub_dat$rt[green_neg] = sub_dat$rt[green_neg] + rnorm(n = length(sub_dat$rt[green_neg]), mean = 50, sd = 30)
}
neg = (sub_dat$valence == 'negative')
sub_dat$rt[neg] = sub_dat$rt[neg] + rnorm(n = length(sub_dat$rt[neg]), mean = 30, sd = 25)
next_subject = function() {
N = 200
set.seed(1)
sub_dat = data.frame(
rt = rnorm(n = N, mean = 400, sd = 50),
response = sample(
c('correct', 'correct', 'correct', 'incorrect', 'tooslow'),
size = N,
replace = TRUE
),
color = sample(c('red', 'green'), size = N, replace = TRUE),
valence = sample(
c('positive', 'negative'),
size = N,
replace = TRUE
),
group = sample(c('fullvision', 'colorblind'), 1)
)
if (sub_dat$group[1] == 'fullvision') {
green_neg = (sub_dat$color == 'green' & sub_dat$valence == 'negative')
sub_dat$rt[green_neg] = sub_dat$rt[green_neg] + rnorm(n = length(sub_dat$rt[green_neg]), mean = 50, sd = 30)
}
neg = (sub_dat$valence == 'negative')
sub_dat$rt[neg] = sub_dat$rt[neg] + rnorm(n = length(sub_dat$rt[neg]), mean = 30, sd = 25)
return(sub_dat)
}
xx = sub_dat
View(xx)
valence = sample(
c('positive', 'negative'),
size = N,
replace = TRUE
)
sample(
c('positive', 'negative'),
size = N,
replace = TRUE
)
sample(
c('positive', 'negative'),
size = N,
replace = FALSE
)
1:100
subject_data = next_subject()
rnorm(n = N, mean = 400, sd = 200)
rnorm(n = N, mean = 400, sd = 100)
rnorm(n = N, mean = 400, sd = 150)
aggregate( subject_data$rt, by = list(subject_data$color), FUN = mean)
aggregate( subject_data$rt, by = list(subject_data$color, subject_data$valence), FUN = mean)
aggred = aggregate( subject_data$rt, by = list(subject_data$color, subject_data$valence), FUN = mean)
aggred
names(aggred)
names(aggred)[startsWith(names(aggred), 'Group.')]
g_names = names(aggred)[startsWith(names(aggred), 'Group.')]
g_names
within(aggred, aggr_group <- paste(A, B, sep='_'))
within(aggred, aggr_group = paste("Group.1", "Group.2", sep='_'))
within(aggred, aggr_group = paste(Group.1, Group.2, sep='_'))
aggred = aggregate( subject_data$rt, by = list(subject_data$color, subject_data$valence), FUN = mean)
g_names = names(aggred)[startsWith(names(aggred), 'Group.')]
within(aggred, aggr_group = paste(Group.1, Group.2, sep='_'))
aggred
within(aggred, aggr_group <- paste(Group.1, Group.2, sep='_'))
within(aggred, aggr_group = paste(Group.1, Group.2, sep='_'))
within(aggred, aggr_group <- paste(Group.1, Group.2, sep='_'))
aggred
within(aggred, aggr_group <- paste(Group.1, Group.2, sep='_'))
g_names
g_names = paste(names(aggred)[startsWith(names(aggred), 'Group.')], sep = ',')
g_names
g_names = paste(names(aggred)[startsWith(names(aggred), 'Group.')], sep = ',')
g_names
paste(names(aggred)[startsWith(names(aggred), 'Group.')], sep = ',')
g_names = paste(names(aggred)[startsWith(names(aggred), 'Group.')], collapse = ',')
g_names
setwd('C:/research/proj_neatstats/neatStats')
within(aggred, aggr_group <-
paste(eval(parse(text = g_names)), sep = '_'))
g_names
eval(parse(
text = paste0("within(aggred, aggr_group <-
paste(", g_names, ", sep = '_'))")
))
to_c(g_names)
g_names = names(aggred)[startsWith(names(aggred), 'Group.')]
g_names
aggred = eval(parse(
text = paste0(
"within(aggred, aggr_group <-
paste(",
paste(g_names, collapse = ','),
", sep = '_'))"
)
))
aggred
aggred[1,] = aggred$aggr_group
aggred[,1] = aggred$aggr_group
aggred
aggred[,1] = (aggr_group = aggred$aggr_group)
aggred
aggred = aggregate( subject_data$rt, by = list(subject_data$color, subject_data$valence), FUN = mean)
g_names = names(aggred)[startsWith(names(aggred), 'Group.')]
aggred = eval(parse(
text = paste0(
"within(aggred, aggr_group <-
paste(",
paste(g_names, collapse = ','),
", sep = '_'))"
)
))
aggred
aggred[1,]
aggred[,1]
aggred[,1] = aggred$aggr_group
aggred
aggred = eval(parse(
text = paste0(
"within(aggred, Group.MERGED <-
paste(",
paste(g_names, collapse = ','),
", sep = '_'))"
)
))
aggred[,1] = aggred$Group.MERGED
colnames(aggred)[1] <- "aggr_group"
aggred
aggred = aggregate( subject_data$rt, by = list(subject_data$color, subject_data$valence), FUN = mean)
g_names = names(aggred)[startsWith(names(aggred), 'Group.')]
aggred = eval(parse(
text = paste0(
"within(aggred, Group.MERGED <-
paste(",
paste(g_names, collapse = ','),
", sep = '_'))"
)
))
aggred[,1] = aggred$Group.MERGED
colnames(aggred)[1] <- "aggr_group"
aggred
aggred = subset(aggred, select = -c('g_merged', g_names))
c('g_merged', g_names)
aggred
aggred = subset(aggred, select = -g_names)
g_names
setdiff(names(aggred),c('g_merged', g_names))
aggred = subset(aggred, select = -setdiff(names(aggred),c('g_merged', g_names)))
aggred = aggred[,setdiff(names(aggred),c('g_merged', g_names))]
aggred
aggred = aggregate( subject_data$rt, by = list(subject_data$color, subject_data$valence), FUN = mean)
g_names = names(aggred)[startsWith(names(aggred), 'Group.')]
aggred = eval(parse(
text = paste0(
"within(aggred, g_merged <-
paste(",
paste(g_names, collapse = ','),
", sep = '_'))"
)
))
aggred[,1] = aggred$g_merged
colnames(aggred)[1] <- "aggr_group"
aggred = subset(aggred, select = -g_names)
aggred = aggred[,setdiff(names(aggred),c('g_merged', g_names))]
aggred
merge_cols = function(dat_aggred) {
g_names = names(dat_aggred)[startsWith(names(dat_aggred), 'Group.')]
dat_aggred = eval(parse(
text = paste0(
"within(dat_aggred, g_merged <-
paste(",
paste(g_names, collapse = ','),
", sep = '_'))"
)
))
dat_aggred[, 1] = dat_aggred$g_merged
colnames(dat_aggred)[1] <- "aggr_group"
dat_aggred = dat_aggred[, setdiff(names(dat_aggred), c('g_merged', g_names))]
return(dat_aggred)
}
aggred = aggregate( subject_data$rt, by = list(subject_data$color, subject_data$valence), FUN = mean)
aggred
merge_cols(aggred)
aggred = aggregate( subject_data$rt, by = list(subject_data$valence), FUN = mean)
merge_cols(aggred)
aggred
aggred = aggregate( subject_data$rt, by = list(subject_data$color), FUN = mean)
merge_cols(aggred)
aggred
merge_cols = function(dat_aggred) {
g_names = names(dat_aggred)[startsWith(names(dat_aggred), 'Group.')]
if (length(g_names) > 1) {
dat_aggred = eval(parse(
text = paste0(
"within(dat_aggred, g_merged <-
paste(",
paste(g_names, collapse = ','),
", sep = '_'))"
)
))
dat_aggred[, 1] = dat_aggred$g_merged
colnames(dat_aggred)[1] <- "aggr_group"
dat_aggred = dat_aggred[, setdiff(names(dat_aggred), c('g_merged', g_names))]
} else {
colnames(dat_aggred)[1] <- "aggr_group"
}
return(dat_aggred)
}
aggred = aggregate( subject_data$rt, by = list(subject_data$color, subject_data$valence), FUN = mean)
aggred
merge_cols(aggred)
aggred = aggregate( subject_data$rt, by = list(subject_data$color), FUN = mean)
aggred
merge_cols(aggred)
gsub(pattern = "(|)|'|\"",
replacement = '',
x = 'asdfsa()ASD')
gsub(pattern = "\(\)|'|\"",
replacement = '',
x = 'asdfsa()ASD')
gsub(pattern = "\\(\\)|'|\"",
replacement = '',
x = 'asdfsa()ASD')
gsub(pattern = "\\(|\\)|'|\"",
replacement = '',
x = 'as)d((fsa()AS(D)')
gsub(pattern = "\\(\\)|'|\"",
replacement = '',
x = 'as)d((fsa()AS(D)')
gsub(pattern = "\\(|\\)|'|\"",
replacement = '',
x = 'as)d((fsa()AS(D)')
list(subject_data$color, subject_data$valence)
group_by = eval(parse(text = paste0(
'with(data = dat, list(',
group_by,
')'
)))
group_by = 'color, valence'
group_by = eval(parse(text = paste0(
'with(data = dat, list(',
group_by,
')'
)))
dat
dat = subject_data
group_by = eval(parse(text = paste0(
'with(data = dat, list(',
group_by,
')'
)))
group_by = eval(parse(text = paste0(
'with(data = dat, list(',
group_by,
')'
)))
group_by = eval(parse(text = paste0(
'with(data = dat, list(',
group_by,
'))'
)))
group_by[1]
group_by[2]
rep(0, nrow(dat))
group_by = rep(0, nrow(dat))
typeof(group_by)
class(group_by)
group_by = list(rep(0, nrow(dat)))
class(group_by)
typeof(group_by)
library('devtools')
library("roxygen2")
setwd('C:/research/proj_neatstats/neatStats')
document()
# devtools::build_manual()
# devtools::check()
setwd('C:/research/proj_neatstats/')
#uninstall("neatStats")
install("neatStats", upgrade = "never")
library("neatStats")
devtools::check()
library('devtools')
library("roxygen2")
setwd('C:/research/proj_neatstats/neatStats')
devtools::check()
aggr_neat( subject_data, rt )
aggr_neat( subject_data, rt, by = color )
aggr_neat( subject_data, rt, group_by = color )
aggr_neat( subject_data, rt, group_by = color, method = 'mean+sd' )
aggr_neat( subject_data, rt, group_by = color, valence)
aggr_neat( subject_data, rt, group_by = (color, valence) )
aggr_neat( subject_data, rt, group_by = 'color, valence' )
aggr_neat( subject_data, rt, group_by = c('color', 'valence' )
aggr_neat( subject_data, rt, group_by = 'color, valence' )
aggr_neat( subject_data, rt, group_by = color, method = 'mean+sd' )
}
aggr_neat()
xx = sub_dat
? anovaBF
? neatStats
? anova_neat
? aggr_neat
? table_neat
# neatStats::
neatStats::anova_neat
neatStats::props_neat(12,32,43,44)
cat("c(", paste(round(rnorm(
n = 10, mean = 5, sd = 20
), 1), collapse = ','), ")", sep = '')
write.table(
dat_1,
"clipboard",
sep = "\t",
quote = F,
row.names = F
)
environmentName(environment(do.call))
aggr_neat( subject_data, rt, group_by = c('color', 'valence' ) )
xx = c('color', 'valence' )
aggr_neat( subject_data, rt, group_by = xx )
xx = c('color', 'valence' )
aggr_neat( subject_data, rt, group_by = xx )
aggr_neat( subject_data, rt, group_by = c('color', 'valence' ) )
aggr_neat( subject_data, rt, group_by = 'color, valence' )
aggr_neat( subject_data, rt, group_by = 'color, valence', method = 'mean+sd' )
aggr_neat( subject_data, response, group_by = 'color, valence', method = 'correct' )
examples(aggr_neat)
example(aggr_neat)
document()
examples(aggr_neat)
example(aggr_neat)
library("neatStats")
example(aggr_neat)
?aggr_neat
example(aggr_neat)

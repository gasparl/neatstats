if (id_count == 0) {
feedback = paste0(
feedback,
'\nNo matching level found for "',
val_name,
'" for factor "',
fact_name,
'".'
)
} else if (id_count > 1) {
feedback = paste0(
feedback,
'\nMore than one matching level found for "',
val_name,
'" for factor "',
fact_name,
'". (Try different naming for level specification, ',
'or change column names.)'
)
}
}
}
}
}
if (feedback != '') {
func_used = gsub("\\s+", " ", paste(deparse(func_used), collapse = " "))
feedback = paste0(
"Arguments are not correct in the '",
func_used,
"' function:",
feedback,
'\n... Hint: enter help(',
strsplit(func_used, "\\(")[[1]][1],
') for detailed function info.'
)
stop(feedback, call. = F)
}
}
}
func2('value_1_a, value_2_a, value_1_b, value_2_b',
within_ids = list(
letters = c('_a', '_b'),
numbers =  c('_1', '_2')
))
"_b" %in% "value_2_b"
"_b" %in% "_b"
grepl("_b", "value_2_b", fixed = TRUE)
val_wi_id = function(func_used, id_arg, vals_arg) {
print(is.list(id_arg))
if (is.list(id_arg)) {
arg_name = deparse(substitute(arg_val))
func_used = gsub("\\s+", " ", paste(deparse(func_used), collapse = " "))
if (length(id_arg) < 2) {
feedback = paste0(
'\nIf list is given as argument for "',
arg_name,
'", it must contain at least two elements.'
)
} else {
feedback = ''
val_cols = to_c(vals_arg)
vals_num = length(val_cols)
w_facts_num = length(id_arg)
if (2 ** w_facts_num > vals_num) {
feedback = paste0(
'\nYou specified ',
w_facts_num,
' within-subject factors in "',
arg_name,
'". This means there must be at least ',
2 ** w_facts_num,
' values columns specified, but you only specified ',
vals_num,
'.'
)
}
for (val_name in val_cols) {
for (fact_name in names(id_arg)) {
fact_ids = id_arg[fact_name][[1]]
if (length(fact_ids) <= 1) {
feedback = paste0(
feedback,
'\nAll within-subject factors must have at least two levels. (Check "',
fact_name,
'").'
)
} else {
id_count = 0
for (f_id in fact_ids) {
if (grepl(f_id, val_name, fixed = TRUE)) {
id_count = id_count + 1
}
}
if (id_count == 0) {
feedback = paste0(
feedback,
'\nNo matching level found for "',
val_name,
'" for factor "',
fact_name,
'".'
)
} else if (id_count > 1) {
feedback = paste0(
feedback,
'\nMore than one matching level found for "',
val_name,
'" for factor "',
fact_name,
'". (Try different naming for level specification, ',
'or change column names.)'
)
}
}
}
}
}
if (feedback != '') {
func_used = gsub("\\s+", " ", paste(deparse(func_used), collapse = " "))
feedback = paste0(
"Arguments are not correct in the '",
func_used,
"' function:",
feedback,
'\n... Hint: enter help(',
strsplit(func_used, "\\(")[[1]][1],
') for detailed function info.'
)
stop(feedback, call. = F)
}
}
}
func2('value_1_a, value_2_a, value_1_b, value_2_b',
within_ids = list(
letters = c('_a', '_b'),
numbers =  c('_1', '_2')
))
func2('value_1_a, value_2_a, value_1_b, value_2_b',
within_ids = list(
letters = c('_a', '_b'),
numbers =  c('_1', '_2')
))
func2('value_1_a, value_2_a, value_1_b, value_2_b',
within_ids = list(
letters = c('_a', '_b'),
numbers =  c('_1', '_2s')
))
func2('value_1_a, value_2_a, value_1_b, value_2_b',
within_ids = list(
letters = c('a', 'b'),
numbers =  c('_1', '_2')
))
func2 = function(values, within_ids = NULL) {
validate_args(match.call(), list(val_arg(
within_ids, c('null', 'char' ), 1
)))
val_wi_id(match.call(), within_ids, values)
cat('Arguments checked.', fill = TRUE)
}
func2('value_1_a, value_2_a, value_1_b, value_2_b',
within_ids = list(
letters = c('_a', '_b'),
numbers =  c('_1', '_2')
))
func2 = function(values, within_ids = NULL) {
validate_args(match.call(), list(val_arg(
within_ids, c('null', 'char', 'list'), 1
)))
val_wi_id(match.call(), within_ids, values)
cat('Arguments checked.', fill = TRUE)
}
func2('value_1_a, value_2_a, value_1_b, value_2_b',
within_ids = list(
letters = c('_a', '_b'),
numbers =  c('_1', '_2')
))
func2('value_1_a, value_2_a, value_1_b, value_2_b',
within_ids = list(
letters = c('_a', 'b'),
numbers =  c('_1', '_2')
))
func2('value_1_a, value_2_a, value_1_b, value_2_b',
within_ids = list(
letters = c('a', '_b'),
numbers =  c('_1', '_2')
))
func2 = function(values, within_ids = NULL) {
validate_args(match.call(), list(val_arg(
within_ids, c('null', 'char' ), 1
)))
val_wi_id(match.call(), within_ids, values)
cat('Arguments checked.', fill = TRUE)
}
func2('value_1_a, value_2_a, value_1_b, value_2_b',
within_ids = list(
letters = c('a', '_b'),
numbers =  c('_1', '_2')
))
func2 = function(values, within_ids = NULL) {
func_name = match.call()
validate_args(func_name, list(val_arg(
within_ids, c('null', 'char', 'list'), 1
)))
val_wi_id(func_name, within_ids, values)
cat('Arguments checked.', fill = TRUE)
}
func2('value_1_a, value_2_a, value_1_b, value_2_b',
within_ids = list(
letters = c('a', '_b'),
numbers =  c('_1', '_2')
))
func2 = function(values, within_ids = NULL) {
validate_args(match.call(), list(val_arg(
within_ids, c('null', 'char', 'list'), 1
)))
val_wi_id(match.call(), within_ids, values)
cat('Arguments checked.', fill = TRUE)
}
func2('value_1_a, value_2_a, value_1_b, value_2_b',
within_ids = list(
letters = c('a', '_b'),
numbers =  c('_1', '_2')
))
val_wi_id = function(func_used, id_arg, vals_arg) {
if (is.list(id_arg)) {
arg_name = deparse(substitute(arg_val))
func_used = gsub("\\s+", " ", paste(deparse(func_used), collapse = " "))
if (length(id_arg) < 2) {
feedback = paste0(
'\nIf list is given as argument for "',
arg_name,
'", it must contain at least two elements.'
)
} else {
feedback = ''
val_cols = to_c(vals_arg)
vals_num = length(val_cols)
w_facts_num = length(id_arg)
if (2 ** w_facts_num > vals_num) {
feedback = paste0(
'\nYou specified ',
w_facts_num,
' within-subject factors in "',
arg_name,
'". This means there must be at least ',
2 ** w_facts_num,
' values columns specified, but you only specified ',
vals_num,
'.'
)
}
for (val_name in val_cols) {
for (fact_name in names(id_arg)) {
fact_ids = id_arg[fact_name][[1]]
if (length(fact_ids) <= 1) {
feedback = paste0(
feedback,
'\nAll within-subject factors must have at least two levels. (Check "',
fact_name,
'").'
)
} else {
id_count = 0
for (f_id in fact_ids) {
if (grepl(f_id, val_name, fixed = TRUE)) {
id_count = id_count + 1
}
}
if (id_count == 0) {
feedback = paste0(
feedback,
'\nNo matching level found for "',
val_name,
'" for factor "',
fact_name,
'".'
)
} else if (id_count > 1) {
feedback = paste0(
feedback,
'\nMore than one matching level found for "',
val_name,
'" for factor "',
fact_name,
'". (Try different naming for level specification, ',
'or change column names.)'
)
}
}
}
}
}
if (feedback != '') {
feedback = paste0(
"Arguments are not correct in the '",
func_used,
"' function:",
feedback,
'\n... Hint: enter help(',
gsub('"', '', strsplit(func_used, "\\(")[[1]][1]),
') for detailed function info.'
)
stop(feedback, call. = F)
}
}
}
func2('value_1_a, value_2_a, value_1_b, value_2_b',
within_ids = list(
letters = c('a', 'b'),
numbers =  c('_1', '_2')
))
func2('value_1_a, value_2_a, value_1_b, value_2_b',
within_ids = list(
letters = c('_a', '_b'),
numbers =  c('_1', '_2')
))
func2('value_1_a, value_2_a, value_1_b, value_2_b',
within_ids = list(
letters = c('a', '_b'),
numbers =  c('_1', '_2')
))
func2('value_1_a',
within_ids = list(
letters = c('a', '_b'),
numbers =  c('_1', '_2')
))
func2('value_1_a, value_2_a, value_1_b',
within_ids = list(
letters = c('a', '_b'),
numbers =  c('_1', '_2')
))
func2('value_1_a, value_2_a, value_1_b, value_2_b, asdas',
within_ids = list(
letters = c('a', '_b'),
numbers =  c('_1', '_2')
))
func2('value_1_a, value_2_a, value_1_b, value_2_b, value_2_b',
within_ids = list(
letters = c('a', '_b'),
numbers =  c('_1', '_2')
))
func2('value_1_a, value_2_a, value_1_b, value_2_b, value_2_b',
within_ids = list(
letters = c('_a', '_b'),
numbers =  c('_1', '_2')
))
func2('value_1_a, value_2_a, value_1_b, value_2_b',
within_ids = list(
letters = c('_a' ),
numbers =  c('_1', '_2')
))
func2('value_1_a, value_2_a, value_1_b, value_2_b',
within_ids = list(
letters = c('_a', '_b', '_b'),
numbers =  c('_1', '_2')
))
func2('value_1_a, value_2_a, value_1_b, value_2_b',
within_ids = list(
letters = c('_a', '_b', '_c'),
numbers =  c('_1', '_2')
))
eval(parse(text = 'data_per_subject'))
eval(parse(text = 'data_per_subjectss'))
library('devtools')
library("roxygen2")
setwd('C:/research/proj_neatstats/neatStats')
document()
devtools::check()
#uninstall("neatStats")
install("neatStats", upgrade = "never")
library("neatStats")
# devtools::build_manual()
# devtools::check()
setwd('C:/research/proj_neatstats/')
#uninstall("neatStats")
install("neatStats", upgrade = "never")
library("neatStats")
dat_1 = data.frame(
subject = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
grouping1 = c(1, 1, 1, 1, 2, 2, 2, 2, 2, 2),
grouping2 = c(1, 2, 1, 2, 2, 1, 1, 1, 2, 1),
value_1_a = c(36.2, 45.2, 41, 24.6, 30.5, 28.2, 40.9, 45.1, 31, 16.9),
value_2_a = c(-14.1, 58.5, -25.5, 42.2, -13, 4.4, 55.5, -28.5, 25.6, -37.1),
value_1_b = c(83, 71, 111, 70, 92, 75, 110, 111, 110, 85),
value_2_b = c(8.024, -14.162, 3.1, -2.1, -1.5, 0.91, 11.53, 18.37, 0.3, -0.59),
value_1_c = c(27.4,-17.6,-32.7, 0.4, 37.2, 1.7, 18.2, 8.9, 1.9, 0.4),
value_2_c = c(7.7, -0.8, 2.2, 14.1, 22.1, -47.7, -4.8, 8.6, 6.2, 18.2)
)
# get the between-subject effect of 'grouping1'
anova_neat('dat_1', values = 'value_1_a', between_vars = 'grouping1')
#uninstall("neatStats")
install("neatStats", upgrade = "never")
dat_1 = data.frame(
subject = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
grouping1 = c(1, 1, 1, 1, 2, 2, 2, 2, 2, 2),
grouping2 = c(1, 2, 1, 2, 2, 1, 1, 1, 2, 1),
value_1_a = c(36.2, 45.2, 41, 24.6, 30.5, 28.2, 40.9, 45.1, 31, 16.9),
value_2_a = c(-14.1, 58.5, -25.5, 42.2, -13, 4.4, 55.5, -28.5, 25.6, -37.1),
value_1_b = c(83, 71, 111, 70, 92, 75, 110, 111, 110, 85),
value_2_b = c(8.024, -14.162, 3.1, -2.1, -1.5, 0.91, 11.53, 18.37, 0.3, -0.59),
value_1_c = c(27.4,-17.6,-32.7, 0.4, 37.2, 1.7, 18.2, 8.9, 1.9, 0.4),
value_2_c = c(7.7, -0.8, 2.2, 14.1, 22.1, -47.7, -4.8, 8.6, 6.2, 18.2)
)
# get the between-subject effect of 'grouping1'
anova_neat('dat_1', values = 'value_1_a', between_vars = 'grouping1')
# main effects of 'grouping1', 'grouping2', and their interactions
anova_neat('dat_1', values = 'value_1_a', between_vars = 'grouping1, grouping2')
# repeated measures:
# get the within-subject effect for 'value_1_a' vs. 'value_1_b'
anova_neat('dat_1', values = 'value_1_a, value_1_b')
# same, but give the factor a custom variable name
anova_neat('dat_1', values = 'value_1_a, value_1_b', within_ids = 'a_vs_b')
# or
anova_neat('dat_1', values = 'value_1_a, value_1_b', within_ids = 'letters')
# within-subject effect for 'value_1_a' vs. 'value_1_b' vs. 'value_1_c'
anova_neat('dat_1', values = 'value_1_a, value_1_b, value_1_c')
# within-subject main effect for 'value_1_a' vs. 'value_1_b' vs. 'value_1_c',
# between-subject main effect 'grouping1', and the interaction of these two main
# effects
anova_neat('dat_1', values = 'value_1_a, value_1_b, value_1_c', between_vars = 'grouping1')
# within-subject 'number' main effect for variables with number '1' vs. number
# '2' ('value_1_a' and 'value_1_b' vs. 'value_2_a' and 'value_2_b'), 'letter'
# main effect for variables with final letterr 'a' vs. final letter 'b'
# ('value_1_a' and 'value_2_a' vs. 'value_1_b' and 'value_2_b'), and the
# 'letter' x 'number' interaction
anova_neat('dat_1',
values = 'value_1_a, value_2_a, value_1_b, value_2_b',
within_ids = list(
letters = c('_a', '_b'),
numbers =  c('_1', '_2')
))
# same as above, but now including between-subject main effect 'grouping2' and
# its interactions
anova_neat(
'dat_1',
values = 'value_1_a, value_2_a, value_1_b, value_2_b',
within_ids = list(
letters = c('_a', '_b'),
numbers =  c('_1', '_2')
),
between_vars = 'grouping2'
)
# within-subject 'number' main effect for variables with number '1' vs. number
# '2' ('value_1_a' and 'value_1_b' vs. 'value_2_a' and 'value_2_b'), 'letter'
# main effect for variables with final letterr 'a' vs. final letter 'b'
# ('value_1_a' and 'value_2_a' vs. 'value_1_b' and 'value_2_b'), and the
# 'letter' x 'number' interaction
anova_neat('dat_1',
values = 'value_1_a, value_2_a, value_1_b, value_2_b',
within_ids = list(
letters = c('_a', '_ab'),
numbers =  c('_1', '_2')
))
anova_neat('dat_1',
values = 'value_1_a,  value_1_b, value_2_b',
within_ids = list(
letters = c('_a', '_b'),
numbers =  c('_1', '_2')
))
anova_neat('dat_1',
values = 'value_1_a, , value_1_b, value_2_b',
within_ids = list(
letters = c('_a', '_b'),
numbers =  c('_1', '_2')
))
anova_neat('dat_1',
values = 'value_1_a, , value_1_b, value_2_b',
within_ids = list(
letters = c('_a', ''),
numbers =  c('_1', '_2')
))
# within-subject main effect for 'value_1_a' vs. 'value_1_b' vs. 'value_1_c',
# between-subject main effect 'grouping1', and the interaction of these two main
# effects
anova_neat('dat_1', values = 'value_1_a, , value_1_c', between_vars = 'grouping1')
anova_neat('dat_ss1',
values = 'value_1_a, value_2_a, value_1_b, value_2_b',
within_ids = list(
letters = c('_a', '_b'),
numbers =  c('_1', '_2')
))
anova_neat(dat_ss1,
values = 'value_1_a, value_2_a, value_1_b, value_2_b',
within_ids = list(
letters = c('_a', '_b'),
numbers =  c('_1', '_2')
))
anova_neat(T,
values = 'value_1_a, value_2_a, value_1_b, value_2_b',
within_ids = list(
letters = c('_a', '_b'),
numbers =  c('_1', '_2')
))
anova_neat(T,
values = 'value_1_a, value_2_a, value_1_b, value_2_b',
within_ids = T
))
anova_neat(T,
values = 'value_1_a, value_2_a, value_1_b, value_2_b',
within_ids = T
)
anova_neat(T,
values = 'value_1_a, value_2_a, value_1_b, value_2_b',
within_ids = dat_1
)
anova_neat('dat_1',
values = 'value_1_a, value_2_a, value_1_b, value_2_b',
within_ids = dat_1
)
setwd('C:/research/proj_neatstats/neatStats')
document()
devtools::check()

output$esdc_table <- renderDataTable({
res_tabl()
})
output$sd_feed <- renderUI({
HTML(paramstext())
})
}
shinyApp(ui = ui, server = server)
setwd('/home/gaspar/research/proj_neatstats/neatstats')
val_arg(percent, c('char', 'null'), 0)
paste0(1,2)
list(c('conditions', 'gender'))
with(data = s_dat, list(conditions, gender))
with(data = xdat, list(conditions, gender))
xdat = data.frame(
subject = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
conditions = c('x', 'y', 'x', 'y', 'y', 'x', 'x', 'x', 'y', 'x'),
gender = c(2, 2, NA, NA, 1, 1, 1, 2, NA, NA),
age = c(6, 7, 8.5, 6, 5, 16, NA, 16, 45, 77),
measure_x = c(83, 71, 111, 70, 92, 75, 110, 111, 110, 85),
stringsAsFactors = TRUE
)
with(data = xdat, list(conditions, gender))
with(data = xdat, list(conditions, gender))
with(data = xdat, paste(conditions, gender, sep = '_'))
library('devtools')
library("roxygen2")
setwd('/home/gaspar/research/proj_neatstats/neatstats')
document()
# devtools::check()
# devtools::check(args = '--run-donttest')
# devtools::build_manual()
library("spelling")
setwd('/home/gaspar/research/proj_neatstats')
#devtools::check_built("neatStats_1.2.0.tar.gz", args = '--run-donttest')
#uninstall("neatStats")
install("neatstats", upgrade = "never")
# libs ----
library("neatStats")
library("plyr")
# COLLECT DATA ----
setwd(path_neat("lang_results/exp4"))
procsv_names = list.files(pattern = "^prolific_export_.*csv$")
if (exists("dems_pro")) {
rm(dems_pro)
}
for (demname in procsv_names) {
# demname = "prolific_export_5ea41a55095de0010be51c51.csv"
print(demname)
dems_table = read.table(
demname,
sep = ",",
header = TRUE,
fill = TRUE,
quote = "\"",
stringsAsFactors = FALSE
)
dems_table = dems_table[dems_table$status == "APPROVED" | dems_table$status == "AWAITING REVIEW",
c(
"participant_id",
"time_taken",
"age",
"prolific_score",
"Country.of.Birth",
"Current.Country.of.Residence",
"Employment.Status",
"First.Language",
"Fluent.languages",
"Nationality",
"Sex",
"Student.Status"
)]
if (exists("dems_pro")) {
dems_pro =  merge(dems_pro, dems_table, all = T)
} else {
dems_pro = dems_table
}
}
colnames(dems_pro)[1] = "userid"
# duplicated(dems_pro$userid)
file_names = list.files(pattern = "^lg_exp4_.*txt$")
if (exists("main_cit_merg")) {
rm(main_cit_merg)
}
# exp1_unique_names = exp_unique_names
for (f_name in file_names) {
#f_name = "lg_exp4_hu_SOX_20200611204120.txt"
print(f_name)
subj_data = read.table(
f_name,
sep = "\t",
header = TRUE,
fill = TRUE,
quote = "\"",
stringsAsFactors = FALSE
)
dems_row = subj_data[startsWith(as.character(subj_data$subject_id), 'dems'), ]
dems_heads = strsplit(dems_row[[2]], "/")[[1]]
dems_dat = strsplit(dems_row[[3]], "/")[[1]]
dems = do.call(rbind.data.frame, list(dems_dat))
colnames(dems) = dems_heads
subj_data$stim_type[grepl('_fill$', subj_data$stim_type)] = "nontargflr"
subj_data$stim_type[grepl('^irrelevant', subj_data$stim_type)] = "irrelevant"
subj_itms_base = subj_data[subj_data$phase == 'main', ]
# subj_itms_base = subj_data[subj_data$phase == 'main' & subj_data$trial_number <= 81, ]
dems$first_lg = subj_data$tested_lang[1]
if (nrow(subj_itms_base) != 648*2) {
# just double-check
# print("number of rows:")
# print(nrow(subj_itms_base))
stop("trial num incorrect: ", nrow(subj_itms_base))
}
subj_itms_base$valid_trial = ifelse(
subj_itms_base$incorrect == 0 &
subj_itms_base$too_slow == 0 &
subj_itms_base$rt_start >= 150,
1,
0
)
probs1 = subj_itms_base$rt_start[subj_itms_base$valid_trial == 1 &
subj_itms_base$stim_type == 'probe' &
subj_itms_base$test_num == '1']
irrs1 = subj_itms_base$rt_start[subj_itms_base$valid_trial == 1 &
subj_itms_base$stim_type == 'irrelevant' &
subj_itms_base$test_num == '1']
probs2 = subj_itms_base$rt_start[subj_itms_base$valid_trial == 1 &
subj_itms_base$stim_type == 'probe' &
subj_itms_base$test_num == '2']
irrs2 = subj_itms_base$rt_start[subj_itms_base$valid_trial == 1 &
subj_itms_base$stim_type == 'irrelevant' &
subj_itms_base$test_num == '2']
dems$dcitph1 = t_neat(probs1, irrs1, bf_added = FALSE, hush = TRUE)$stats['d']
dems$dcitph2 = t_neat(probs2, irrs2, bf_added = FALSE, hush = TRUE)$stats['d']
subj_acc_rates = neatStats::aggr_neat(
dat = subj_itms_base,
values = valid_trial,
method = mean,
group_by = c("stim_type", 'tested_lang'),
filt = (rt_start >= 150),
prefix = "acc_rate"
)
subj_acc_rate_blocks = neatStats::aggr_neat(
dat = subj_itms_base[subj_itms_base$tested_lang == dems$l1,],
values = valid_trial,
method = mean,
group_by = c("stim_type", "block_number"),
filt = (rt_start >= 150),
prefix = "acc_B_rate"
)
subj_rt_mean = neatStats::aggr_neat(
dat = subj_itms_base,
values = rt_start,
method = mean,
group_by = c("stim_type", 'tested_lang'),
filt = (rt_start >= 150 & valid_trial == 1),
prefix = "rt_mean"
)
subj_rt_mean_blocks = neatStats::aggr_neat(
dat = subj_itms_base[subj_itms_base$tested_lang == dems$l1,],
values = rt_start,
method = mean,
group_by = c("stim_type", "block_number"),
filt = (rt_start >= 150 & valid_trial == 1),
prefix = "rt_B_mean"
)
subj_rt_mean_fillertype = neatStats::aggr_neat(
dat = subj_itms_base[subj_itms_base$tested_lang == dems$l1,],
values = rt_start,
method = mean,
group_by = c("stim_type", "fillertype"),
filt = (rt_start >= 150 & valid_trial == 1),
prefix = "rt_mean"
)
subj_itms_base$press_duration = as.numeric(subj_itms_base$press_duration)
subj_dur_mean = neatStats::aggr_neat(
dat = subj_itms_base,
values = press_duration,
method = mean,
group_by = c("stim_type", 'tested_lang'),
filt = (rt_start >= 150 & valid_trial == 1),
prefix = "dur_mean"
)
subj_dur_mean_blocks = neatStats::aggr_neat(
dat = subj_itms_base[subj_itms_base$tested_lang == dems$l1,],
values = press_duration,
method = mean,
group_by = c("stim_type", "block_number"),
filt = (rt_start >= 150 & valid_trial == 1),
prefix = "dur_B_mean"
)
overall_acc = neatStats::aggr_neat(
dat = subj_itms_base,
values = valid_trial,
method = mean,
group_by = c("stim_type"),
prefix = "overall_acc"
)
subject_line = table_neat(
list(
subj_acc_rates,
subj_rt_mean,
subj_dur_mean,
subj_acc_rate_blocks,
subj_rt_mean_blocks,
subj_dur_mean_blocks,
subj_rt_mean_fillertype,
overall_acc
),
transpose = TRUE
)
subject_line = cbind(dems, subject_line)
counting = 0
for (maxblock in c(5, 7, 9, 11)) {
counting = counting + 1
bdat = subj_itms_base[as.numeric(subj_itms_base$block_number) < maxblock,]
subj_rt_mean_b = neatStats::aggr_neat(
dat = bdat,
values = rt_start,
method = mean,
group_by = c("stim_type", 'tested_lang'),
filt = (rt_start >= 150 & valid_trial == 1),
prefix = paste0("rt_mean_", counting, "b")
)
subject_line = cbind(subject_line, table_neat(list(subj_rt_mean_b),
transpose = TRUE))
}
if (exists("main_cit_merg")) {
# add subject aggregations
main_cit_merg =  rbind.fill(main_cit_merg, subject_line)
} else {
main_cit_merg = subject_line
}
}
main_cit_prep = main_cit_merg
# i = 0
# for (x in sort(as.character(main_cit_prep$subject_id))) {
#     i = i+1
#     print(i)
#     print(x)
# }
for (colname in names(main_cit_prep)) {
if (class(main_cit_prep[[colname]]) ==  "numeric" &
grepl("_probe_", colname, fixed = TRUE)) {
dat_probe = main_cit_prep[[colname]]
dat_irrel = main_cit_prep[[sub("_probe_", "_irrelevant_", colname)]]
newcol = sub("_probe_", "_diff_", colname)
main_cit_prep[[newcol]] = dat_probe - dat_irrel
if (grepl("_pl$|_hu$", colname)) {
l1_col = sub("_pl$|_hu$", "_l1", newcol)
if (!l1_col %in% colnames(main_cit_prep)) {
main_cit_prep[[l1_col]] = -1
}
main_cit_prep[[l1_col]] = ifelse(
main_cit_prep$l1 == substr(newcol, nchar(newcol) -
1, nchar(newcol)),
main_cit_prep[[newcol]],
main_cit_prep[[l1_col]]
)
}
}
}
main_cit_prep$main_overall_acc = ((main_cit_prep$overall_acc_probe) + main_cit_prep$overall_acc_irrelevant * 4) / 5
# sort(main_cit_prep$main_overall_acc)
# cat(as.character(main_cit_prep$userid[main_cit_prep$l1 == "pl"]), sep = ",", fill = T)
# cat(as.character(main_cit_prep$userid[main_cit_prep$l1 == "hu"]), sep = ",", fill = T)
# cat(as.character(main_cit_prep$userid[main_cit_prep$l1 == "hu" &
#                                           main_cit_prep$bonus == 1]),
#     sep = ",0.5\n",
#     fill = T)
# cat(as.character(main_cit_prep$userid[main_cit_prep$l1 == "hu" &
#                                           main_cit_prep$bonus == 2]),
#     sep = ",1.0\n",
#     fill = T)
main_cit_withdems = merge(main_cit_prep, dems_pro, by = "userid", all = TRUE)
main_cit_withdems$probe_correct1 = as.numeric(as.character(main_cit_withdems$probe_correct1))
main_cit_withdems$probe_correct2 = as.numeric(as.character(main_cit_withdems$probe_correct2))
main_cit_corrprob = main_cit_withdems[(
main_cit_withdems$probe_correct1 > 2 &
main_cit_withdems$l1 == main_cit_withdems$first_lg
) |
(
main_cit_withdems$probe_correct2 > 2 &
main_cit_withdems$l1 != main_cit_withdems$first_lg
),]
main_cit_withdems$remaining = ifelse(
main_cit_withdems$subject_id %in% main_cit_corrprob$subject_id,
'remained',
'excluded'
)
main_cit_withdems[main_cit_withdems$remaining == 'excluded',]
# accuracy exclusion
aggr_neat(
dat = main_cit_withdems,
values = main_overall_acc,
group_by = c('remaining', 'l1'),
method = length
)
main_cit_data = main_cit_corrprob
main_cit_data = main_cit_data[main_cit_data$overall_acc_target > 0.4,]
main_cit_data = main_cit_data[main_cit_data$overall_acc_targetflr > 0.4,]
main_cit_data = main_cit_data[main_cit_data$overall_acc_nontargflr > 0.6,]
main_cit_data = main_cit_data[main_cit_data$main_overall_acc > 0.8,]
main_cit_corrprob$remaining = ifelse(main_cit_corrprob$subject_id %in% main_cit_data$subject_id,
'remained',
'excluded')
# accuracy exclusion
aggr_neat(
dat = main_cit_corrprob,
values = main_overall_acc,
group_by = c('remaining', 'l1'),
method = length
)
full_data = main_cit_data
full_data = main_cit_data
neatStats::dems_neat(full_data, percent = F, group_by = 'l1')
neatStats::dems_neat(full_data, percent = F, group_by = c('alternation'))
library('devtools')
library("roxygen2")
setwd('/home/gaspar/research/proj_neatstats/neatstats')
document()
# devtools::check()
# devtools::check(args = '--run-donttest')
# devtools::build_manual()
library("spelling")
setwd('/home/gaspar/research/proj_neatstats')
#devtools::check_built("neatStats_1.2.0.tar.gz", args = '--run-donttest')
#uninstall("neatStats")
install("neatstats", upgrade = "never")
# install("neatStats", upgrade = "never", quick = TRUE)
library("neatStats")
neatStats::dems_neat(full_data, percent = F, group_by = 'l1')
neatStats::dems_neat(full_data, percent = F, group_by = c('alternation'))
neatStats::dems_neat(full_data, percent = F, group_by = c('l1', 'alternation'))
table(full_data$l1, full_data$alternation)
neatStats::dems_neat(full_data,
percent = F,
group_by = c('l1', 'alternation'))
# accuracy exclusion
aggr_neat(
dat = main_cit_corrprob,
values = main_overall_acc,
group_by = c('remaining', 'l1'),
method = length
)
# accuracy exclusion
aggr_neat(
dat = main_cit_corrprob,
values = main_overall_acc,
group_by = c('l1', 'remaining'),
method = length
)
stop(
'The data frame must contain the columns "gender" (or "sex") and "age", but neither was found among the column names.'
)
stop(
'The data frame must contain the columns "gender" (or "sex") and "age"',', but neither was found among the column names.'
)
aggr_neat(
dat = main_cit_corrprob,
values = neat_unique_ids,
group_by = c('l1', 'remaining'),
method = length,
new_name = 'count'
)
library('devtools')
library("roxygen2")
setwd('/home/gaspar/research/proj_neatstats/neatstats')
document()
# devtools::check()
# devtools::check(args = '--run-donttest')
# devtools::build_manual()
library("spelling")
setwd('/home/gaspar/research/proj_neatstats')
#devtools::check_built("neatStats_1.2.0.tar.gz", args = '--run-donttest')
#uninstall("neatStats")
install("neatstats", upgrade = "never")
# install("neatStats", upgrade = "never", quick = TRUE)
library("neatStats")
excl_neat(main_cit_data, overall_acc_target > 0.6)
library('devtools')
library("roxygen2")
setwd('/home/gaspar/research/proj_neatstats/neatstats')
document()
# devtools::check()
# devtools::check(args = '--run-donttest')
# devtools::build_manual()
library("spelling")
# spelling::spell_check_package()
# devtools::build()
setwd('/home/gaspar/research/proj_neatstats')
#devtools::check_built("neatStats_1.2.0.tar.gz", args = '--run-donttest')
#uninstall("neatStats")
install("neatstats", upgrade = "never")
excl_neat(main_cit_data, overall_acc_target > 0.6)
sink()
sink()
sink()
sink()
sink()
excl_neat(main_cit_data, overall_acc_target > 0.6)
# accuracy exclusion
aggr_neat(
dat = main_cit_corrprob,
values = main_overall_acc,
group_by = c('l1', 'remaining'),
method = length
)
cat(aggr_neat(
dat = main_cit_corrprob,
values = main_overall_acc,
group_by = c('l1', 'remaining'),
method = length
), fill = T)
print(aggr_neat(
dat = main_cit_corrprob,
values = main_overall_acc,
group_by = c('l1', 'remaining'),
method = length
), fill = T)
print(aggr_neat(
dat = main_cit_corrprob,
values = main_overall_acc,
group_by = c('l1', 'remaining'),
method = length
))
library('devtools')
library("roxygen2")
setwd('/home/gaspar/research/proj_neatstats/neatstats')
document()
# devtools::check()
# devtools::check(args = '--run-donttest')
# devtools::build_manual()
library("spelling")
# spelling::spell_check_package()
# devtools::build()
setwd('/home/gaspar/research/proj_neatstats')
#devtools::check_built("neatStats_1.2.0.tar.gz", args = '--run-donttest')
#uninstall("neatStats")
install("neatstats", upgrade = "never")
excl_neat(main_cit_data, overall_acc_target > 0.6)
excl_neat(main_cit_data, overall_acc_target > 0.6, 'l1')
library('devtools')
library("roxygen2")
setwd('/home/gaspar/research/proj_neatstats/neatstats')
document()
# devtools::check()
# devtools::check(args = '--run-donttest')
# devtools::build_manual()
library("spelling")
setwd('/home/gaspar/research/proj_neatstats')
#devtools::check_built("neatStats_1.2.0.tar.gz", args = '--run-donttest')
#uninstall("neatStats")
install("neatstats", upgrade = "never")
data("mtcars") # load base R example dataset
mtcars
excl_neat(mtcars, mpg >10)
excl_neat(mtcars, mpg >20)
excl_neat(mtcars, mpg > 20)
# assign the same
mtcars_filtered = excl_neat(mtcars, mpg > 20)
mtcars_filtered
# group printed count by cyl
excl_neat(mtcars, mpg > 20, group_by = 'cyl')
# group by cyl amd carb
excl_neat(mtcars, mpg > 15, group_by = c('cyl','carb'))
# group printed count by cyl
excl_neat(mtcars, mpg > 20, group_by = 'cyl')
excl_neat(mtcars, mpg > 20, group_by = 'cyl', sort_by = 'group')
# longer filter expression
excl_neat(mtcars, mpg > 15 & gear == 4, group_by = 'cyl',)
# longer filter expression
xx = excl_neat(mtcars, mpg > 15 & gear == 4, group_by = 'cyl',)
xx
# longer filter expression
xx = excl_neat(mtcars, mpg > 15 , group_by = 'cyl',)
xx
# longer filter expression
excl_neat(mtcars, mpg > 15 & gear == 4, group_by = 'cyl',)
# longer filter expression
excl_neat(mtcars, "mpg > 15 & gear == 4", group_by = 'cyl',)
# same with filter expression as string
excl_neat(mtcars, "mpg > 15 & gear == 4", group_by = 'cyl', hush = TRUE)
# same with filter expression as string
xx = excl_neat(mtcars, "mpg > 15 & gear == 4", group_by = 'cyl', hush = TRUE)
xx
source('~/research/proj_neatstats/neatstats/R/excl_neat.R', echo=TRUE)
devtools::install_github("csgillespie/roxygen2Comment")
library('devtools')
library("roxygen2")
setwd('/home/gaspar/research/proj_neatstats/neatstats')
document()
# devtools::check()
# devtools::check(args = '--run-donttest')
# devtools::build_manual()
library("spelling")
setwd('/home/gaspar/research/proj_neatstats')
#devtools::check_built("neatStats_1.2.0.tar.gz", args = '--run-donttest')
#uninstall("neatStats")
install("neatstats", upgrade = "never")
setwd('/home/gaspar/research/proj_neatstats/neatstats')
devtools::check()
library('devtools')
library("roxygen2")
setwd('/home/gaspar/research/proj_neatstats/neatstats')
document()
# devtools::check()
# devtools::check(args = '--run-donttest')
# devtools::build_manual()
library("spelling")
# spelling::spell_check_package()
# devtools::build()
devtools::check()

names(subjects_merged)
# now ANOVA on RTs for the main question: Color/Valence/Group interaction
anova_neat(subjects_merged, values = 'rt_green_negative, rt_green_positive, rt_red_negative, rt_red_positive', within_ids = list(color = c('green', 'red'), valence = c('positive', 'negative') ))
# now ANOVA on RTs for the main question: Color/Valence/Group interaction
anova_neat(subjects_merged,
values = 'rt_green_negative, rt_green_positive, rt_red_negative, rt_red_positive',
within_ids = list(
color = c('green', 'red'),
valence = c('positive', 'negative')
),
between_vars = condition,
bf_added = FALSE)
# now ANOVA on RTs for the main question: Color/Valence/Group interaction
anova_neat(subjects_merged,
values = 'rt_green_negative, rt_green_positive, rt_red_negative, rt_red_positive',
within_ids = list(
color = c('green', 'red'),
valence = c('positive', 'negative')
),
between_vars = 'condition',
bf_added = FALSE)
filenames = 1:30
if ( exists("subjects_merged") ) {
rm(subjects_merged)
}
for (file_name in filenames) {
subject_data = next_subject(file_name)
# with real data, this would be e.g.:
# subject_data = read.table(file_name, stringsAsFactors=F, fill=T, header=T)
# print current file name - just to monitor the process
cat(file_name, ' ' )
# now aggregate rt data per type
rts = aggr_neat(
subject_data,
rt,
group_by = 'color, valence',
method = mean,
prefix = 'rt'
)
# same with error rates
ers = aggr_neat(
subject_data,
response,
group_by = 'color, valence',
method = 'incorrect',
prefix = 'er',
filt = (response %in% c('correct', 'incorrect'))
)
# transpose to get the subject's data in one line
subject_line = table_neat(list(rts, ers), transpose = TRUE)
# add the subject_id and condition to the beginning
subject_line = data.frame(
subject_id = subject_data$subject_num[1],
condition = subject_data$condition[1],
subject_line
)
# add subject aggregations
if ( ! exists("subjects_merged") ) {
# if doesn't yet exist, create first line
subjects_merged = subject_line
} else {
# if exists, add the next lines
subjects_merged = rbind(subjects_merged, subject_line)
# note: if some data may be discrepant for some participants (e.g., some
# participants are tested with blue and yellow colors too), you can use
# rbind.fill from the 'plyr' library to fill in missing data with NAs
}
}
# now ANOVA on RTs for the main question: Color/Valence/Group interaction
anova_neat(subjects_merged,
values = 'rt_green_negative, rt_green_positive, rt_red_negative, rt_red_positive',
within_ids = list(
color = c('green', 'red'),
valence = c('positive', 'negative')
),
between_vars = 'condition',
bf_added = FALSE)
table_neat(
list(
aggr_neat(subjects_merged, rt_green_negative),
aggr_neat(subjects_merged, rt_green_positive),
aggr_neat(subjects_merged, rt_red_negative),
aggr_neat(subjects_merged, rt_red_positive)
))
table_neat(
list(
aggr_neat(subjects_merged, rt_green_negative),
aggr_neat(subjects_merged, rt_green_positive),
aggr_neat(subjects_merged, rt_red_negative),
aggr_neat(subjects_merged, rt_red_positive)
), group_by = 'condition')
next_subject = function(sub_num) {
N = 100
sub_dat = data.frame(
subject_num = toString( sub_num ),
condition = sample(c('fullvision', 'colorblind'), 1),
rt = rnorm(n = N, mean = 400, sd = 150),
response = sample(
c(rep('correct', 9), 'incorrect', 'tooslow'),
size = N,
replace = TRUE
),
color = sample(c('red', 'green'), size = N, replace = TRUE),
valence = sample(
c('positive', 'negative'),
size = N,
replace = TRUE
)
)
if (sub_dat$condition[1] == 'fullvision') {
green_neg = (sub_dat$color == 'green' &
sub_dat$valence == 'negative')
sub_dat$rt[green_neg] = sub_dat$rt[green_neg] + rnorm(n = length(sub_dat$rt[green_neg]),
mean = 50,
sd = 30)
sub_dat$response[green_neg] = sample(
c(rep('correct', 7), 'incorrect', 'tooslow'),
size = length(sub_dat$response[green_neg]),
replace = TRUE
)
red_pos = (sub_dat$color == 'red' &
sub_dat$valence == 'positive')
sub_dat$rt[red_pos] = sub_dat$rt[red_pos] + rnorm(n = length(sub_dat$rt[red_pos]),
mean = 50,
sd = 30)
sub_dat$response[red_pos] = sample(
c(rep('correct', 7), 'incorrect', 'tooslow'),
size = length(sub_dat$response[red_pos]),
replace = TRUE
)
}
neg = (sub_dat$valence == 'negative')
sub_dat$rt[neg] = sub_dat$rt[neg] + rnorm(n = length(sub_dat$rt[neg]),
mean = 30,
sd = 25)
sub_dat$response[neg] = sample(
c(rep('correct', 6), 'incorrect', 'tooslow'),
size = length(sub_dat$response[neg]),
replace = TRUE
)
return(sub_dat)
}
filenames = 1:30
if ( exists("subjects_merged") ) {
rm(subjects_merged)
}
for (file_name in filenames) {
subject_data = next_subject(file_name)
# with real data, this would be e.g.:
# subject_data = read.table(file_name, stringsAsFactors=F, fill=T, header=T)
# print current file name - just to monitor the process
cat(file_name, ' ' )
# now aggregate rt data per type
rts = aggr_neat(
subject_data,
rt,
group_by = 'color, valence',
method = mean,
prefix = 'rt'
)
# same with error rates
ers = aggr_neat(
subject_data,
response,
group_by = 'color, valence',
method = 'incorrect',
prefix = 'er',
filt = (response %in% c('correct', 'incorrect'))
)
# transpose to get the subject's data in one line
subject_line = table_neat(list(rts, ers), transpose = TRUE)
# add the subject_id and condition to the beginning
subject_line = data.frame(
subject_id = subject_data$subject_num[1],
condition = subject_data$condition[1],
subject_line
)
# add subject aggregations
if ( ! exists("subjects_merged") ) {
# if doesn't yet exist, create first line
subjects_merged = subject_line
} else {
# if exists, add the next lines
subjects_merged = rbind(subjects_merged, subject_line)
# note: if some data may be discrepant for some participants (e.g., some
# participants are tested with blue and yellow colors too), you can use
# rbind.fill from the 'plyr' library to fill in missing data with NAs
}
}
# now ANOVA on RTs for the main question: Color/Valence/Group interaction
anova_neat(subjects_merged,
values = 'rt_green_negative, rt_green_positive, rt_red_negative, rt_red_positive',
within_ids = list(
color = c('green', 'red'),
valence = c('positive', 'negative')
),
between_vars = 'condition',
bf_added = FALSE)
table_neat(list(
aggr_neat(subjects_merged, rt_green_negative),
aggr_neat(subjects_merged, rt_green_positive),
aggr_neat(subjects_merged, rt_red_negative),
aggr_neat(subjects_merged, rt_red_positive)
),
group_by = 'condition')
library('ez')
xx = table_neat(list(
aggr_neat(subjects_merged, rt_green_negative),
aggr_neat(subjects_merged, rt_green_positive),
aggr_neat(subjects_merged, rt_red_negative),
aggr_neat(subjects_merged, rt_red_positive)
),
group_by = 'condition')
table_neat(list(
aggr_neat(subjects_merged, rt_green_negative),
aggr_neat(subjects_merged, rt_green_positive),
aggr_neat(subjects_merged, rt_red_negative),
aggr_neat(subjects_merged, rt_red_positive)
),
group_by = 'condition',
method = mean)
table_neat(list(
aggr_neat(subjects_merged, rt_green_negative),
aggr_neat(subjects_merged, rt_green_positive),
aggr_neat(subjects_merged, rt_red_negative),
aggr_neat(subjects_merged, rt_red_positive)
),
group_by = 'condition',
method = mean )
to_plot = table_neat(list(
aggr_neat(subjects_merged, rt_green_negative),
aggr_neat(subjects_merged, rt_green_positive),
aggr_neat(subjects_merged, rt_red_negative),
aggr_neat(subjects_merged, rt_red_positive)
),
group_by = 'condition',
method = mean )
p<-ggplot(data=to_plot, aes(x=aggr_group, y=rt_green_negative)) +
geom_bar(stat="identity")
library('ggplot')
p<-ggplot(data=to_plot, aes(x=aggr_group, y=rt_green_negative)) +
geom_bar(stat="identity")
library('ggplot2')
p<-ggplot(data=to_plot, aes(x=aggr_group, y=rt_green_negative)) +
geom_bar(stat="identity")
ggplot(data=to_plot, aes(x=aggr_group, y=rt_green_negative)) +
geom_bar(stat="identity")
ggplot(data=to_plot, aes(x=aggr_group, y=c(rt_green_negative, rt_green_positive) )) +
geom_bar(stat="identity")
ggplot(data=to_plot, aes(x=aggr_group, y=c(rt_green_negative) )) +
geom_bar()
ggplot(data=to_plot, aes(x=aggr_group, y=c(rt_green_negative) )) +
geom_bar(stat="identity")
cbind(to_plot$rt_green_negative,to_plot$rt_green_positive )
cbind(to_plot$rt_green_negative,to_plot$rt_green_positive, to_plot$rt_red_positive )
to_plot
xx = cbind(to_plot$rt_green_negative,to_plot$rt_green_positive, to_plot$rt_red_positive )
matplot(x = xx,y,type="p")
matplot(x = xx,type="p")
matplot(y = xx,type="p")
matplot(y = xx )
matplot( xx )
matplot( xx )
matplot( to_plot )
to_plot
matplot( to_plot, y = c(1,2) )
matplot( to_plot, x = c(1,2) )
matplot( to_plot, x = c(1,4) )
matplot( to_plot, x = c('fullcolor','colorblind') )
matplot( to_plot, x = c(0,1) )
matplotlib( to_plot, x = c(0,1) )
plot( to_plot, x = c(0,1) )
plot( to_plot  )
matplot( to_plot, type = 'l' )
matplot( to_plot, type = 'h' )
matplot( to_plot, type = 'b' )
matplot( to_plot, type = 'b', pch = 'hi' )
names(to_plot)
to_plot[,-1]
matplot( to_plot[,-1], type = 'b', pch = names(to_plot) )
names(to_plot)
matplot( to_plot[,-1], type = 'b', pch = names(to_plot[,-1]) )
matplot( to_plot[,-1], type = 'b', cex = names(to_plot[,-1]) )
matplot( to_plot[,-1], type = 'b', cex = 'asd' )
matplot( to_plot[,-1], type = 'b', cex = 'a' )
matplot( to_plot[,-1], type = 'b', cex = names(to_plot[,-1]) )
legend("center", colnames(daily.pnl),col=seq_len(nn),cex=0.8,fill=seq_len(nn))
to_plot = table_neat(
list(
aggr_neat(subjects_merged, rt_green_negative),
aggr_neat(subjects_merged, rt_green_positive),
aggr_neat(subjects_merged, rt_red_negative),
aggr_neat(subjects_merged, rt_red_positive)
),
group_by = 'condition',
method = mean
)[,-1]
to_plot
to_plot = table_neat(
list(
aggr_neat(subjects_merged, rt_green_negative),
aggr_neat(subjects_merged, rt_green_positive),
aggr_neat(subjects_merged, rt_red_negative),
aggr_neat(subjects_merged, rt_red_positive)
),
group_by = 'condition',
method = mean
)
legend("center", colnames(to_plot[,-1]),col=seq_len(ncol(to_plot[,-1])),cex=0.8,fill=seq_len(ncol(to_plot[,-1])))
matplot( to_plot[,-1], type = 'b', cex = names(to_plot[,-1]) )
legend("center", colnames(to_plot[,-1]),col=seq_len(ncol(to_plot[,-1])),cex=0.8,fill=seq_len(ncol(to_plot[,-1])))
matplot( to_plot[,-1], type = 'b' )
legend("center", colnames(to_plot[,-1]),col=seq_len(ncol(to_plot[,-1])),cex=0.8,fill=seq_len(ncol(to_plot[,-1])))
legend(colnames(to_plot[,-1]),col=seq_len(ncol(to_plot[,-1])),cex=0.8,fill=seq_len(ncol(to_plot[,-1])))
?legend
matplot( to_plot[,-1], type = 'b' )
legend("topleft", colnames(to_plot[,-1]),col=seq_len(ncol(to_plot[,-1])),cex=0.8,fill=seq_len(ncol(to_plot[,-1])))
matplot( to_plot[,-1], type = 'b', xlim = c(0,1) )
matplot( to_plot[,-1], type = 'b', xlim = c(1,2) )
matplot( to_plot[,-1], type = 'b' )
legend("topleft", colnames(to_plot[,-1]),col=seq_len(ncol(to_plot[,-1])),cex=0.8,fill=seq_len(ncol(to_plot[,-1])))
# quick plot
to_plot = table_neat(
list(
aggr_neat(subjects_merged, rt_green_negative),
aggr_neat(subjects_merged, rt_green_positive),
aggr_neat(subjects_merged, rt_red_negative),
aggr_neat(subjects_merged, rt_red_positive)
),
group_by = 'condition',
method = mean
)
matplot( to_plot[,-1], type = 'b' )
legend("topleft", colnames(to_plot[,-1]),col=seq_len(ncol(to_plot[,-1])),cex=0.8,fill=seq_len(ncol(to_plot[,-1])))
# quick plot of means for the same
to_plot = table_neat(
list(
aggr_neat(subjects_merged, rt_green_negative),
aggr_neat(subjects_merged, rt_green_positive),
aggr_neat(subjects_merged, rt_red_negative),
aggr_neat(subjects_merged, rt_red_positive)
),
group_by = 'condition',
method = mean
)
to_plot
colnames(to_plot[,-1])
colnames(to_plot[,1])
to_plot[,1]
colnames(to_plot[,1])
to_plot
to_plot[,1]
colnames(to_plot)[1]
data_reshaped = stats::reshape(
data_wide,
direction = 'long',
varying = colnames(to_plot[,-1]),
idvar = colnames(to_plot)[1],
timevar = "within_factor",
v.names = "neat_unique_values",
times = colnames(to_plot[,-1])
)
stats::reshape(
to_plot,
direction = 'long',
varying = colnames(to_plot[,-1]),
idvar = colnames(to_plot)[1],
timevar = "within_factor",
v.names = "neat_unique_values",
times = colnames(to_plot[,-1])
)
plot_data = stats::reshape(
to_plot,
direction = 'long',
varying = colnames(to_plot[,-1]),
idvar = colnames(to_plot)[1],
timevar = "within_factor",
v.names = "values",
times = colnames(to_plot[,-1])
)
plot_data
ggplot(data=plot_data, aes(x=values, y=within_factor, fill=aggr_group)) +
geom_bar(stat="identity", position=position_dodge())
ggplot(data=plot_data, aes(x=within_factor, y=values, fill=aggr_group)) +
geom_bar(stat="identity", position=position_dodge())
ggplot(data=plot_data, aes(x=within_factor, y=values, fill=aggr_group)) +
geom_bar(stat="identity", position=position_dodge())+
theme_bw()
ggplot(data=plot_data, aes(x=within_factor, y=values, fill=aggr_group)) +
theme_bw()+
geom_bar(stat="identity", position=position_dodge())
ggplot(data=plot_data, aes(x=within_factor, y=values, fill=aggr_group)) +
theme_bw(geom_bar(stat="identity", position=position_dodge()))
ggplot(data=plot_data, aes(x=within_factor, y=values, fill=aggr_group)) +
geom_bar(stat="identity", position=position_dodge())+
theme_minimal()
ggplot(data=plot_data, aes(x=within_factor, y=values, fill=aggr_group)) +
geom_bar(stat="identity", position=position_dodge())+
theme_bw()
ggplot(data=plot_data, aes(x=within_factor, y=values, fill=aggr_group)) +
geom_bar(stat="identity", position=position_dodge())#+
ggplot(data=plot_data, aes(x=within_factor, y=values, fill=aggr_group)) +
geom_bar(stat="identity", position=position_dodge())+
theme_bw()
ggplot(data = plot_data, aes(x = within_factor, y = values, fill = aggr_group)) +
geom_bar(stat = "identity", position = position_dodge()) +
theme_bw() + scale_fill_manual(values = c('#999999', '#E69F00'))
ggplot(data = plot_data, aes(x = within_factor, y = values, fill = aggr_group)) +
geom_bar(stat = "identity", position = position_dodge()) +
theme_bw() + scale_fill_manual(values = c('#999999', '#EEE'))
ggplot(data = plot_data, aes(x = within_factor, y = values, fill = aggr_group)) +
geom_bar(stat = "identity", position = position_dodge()) +
theme_bw() + scale_fill_manual(values = c('#999999', '#EEEEEE'))
ggplot(data = plot_data, aes(x = within_factor, y = values, fill = aggr_group)) +
geom_bar(stat = "identity", position = position_dodge()) +
theme_bw() + scale_fill_manual(values = c('#999999', '#AAAAAA'))
# now ANOVA on RTs for the main question: Color/Valence/Group interaction
anova_neat(subjects_merged,
values = 'rt_green_negative, rt_green_positive, rt_red_negative, rt_red_positive',
within_ids = list(
color = c('green', 'red'),
valence = c('positive', 'negative')
),
between_vars = 'condition',
bf_added = FALSE)
ggplot(data = plot_data, aes(x = within_factor, y = values, fill = aggr_group)) +
geom_bar(stat = "identity", position = position_dodge()) +
theme_bw() + scale_fill_manual(values = c('#666666', '#AAAAAA'))
ggplot(data = plot_data, aes(x = within_factor, y = values, fill = aggr_group)) +
geom_line(stat = "identity", position = position_dodge()) +
theme_bw() + scale_fill_manual(values = c('#666666', '#AAAAAA'))
ggplot(data = plot_data, aes(x = within_factor, y = values, fill = aggr_group)) +
geom_line( ) +
theme_bw() + scale_fill_manual(values = c('#666666', '#AAAAAA'))
ggplot(data = plot_data, aes(x = within_factor, y = values, line = aggr_group)) +
geom_line( ) +
theme_bw() + scale_fill_manual(values = c('#666666', '#AAAAAA'))
to_plot
ggplot(data = plot_data, aes(x = aggr_group, y = values, fill = within_factor)) +
geom_line( ) +
theme_bw() + scale_fill_manual(values = c('#666666', '#AAAAAA'))
ggplot(data = plot_data, aes(x = aggr_group, y = values, fill = within_factor)) +
geom_line( ) +
theme_bw()
ggplot(data = plot_data, aes(x = within_factor, y = aggr_group)) +
geom_line( ) +
geom_point()+
theme_bw()
ggplot(data = plot_data, aes(x = within_factor, y = aggr_group, group=1)) +
geom_line( ) +
geom_point()+
theme_bw()
ggplot(data = plot_data, aes(x = within_factor, y = values, group=1)) +
geom_line( ) +
geom_point()+
theme_bw()
ggplot(data = plot_data, aes(x = aggr_group, y = values, group=1)) +
geom_line( ) +
geom_point()+
theme_bw()
ggplot(data = plot_data, aes(x = aggr_group, y = values, group=within_factor)) +
geom_line( ) +
geom_point()+
theme_bw()
ggplot(data = plot_data, aes(x = aggr_group, y = values, group=within_factor)) +
geom_line( ) +
geom_point()
ggplot(data = plot_data, aes(x = aggr_group, y = values, group=within_factor)) +
geom_line( ) +
geom_point()+
theme_bw()
ggplot(data = plot_data, aes(x = aggr_group, y = values, group=within_factor)) +
geom_line(aes(linetype=within_factor) ) +
geom_point()+
theme_bw()
ggplot(data = plot_data, aes(x = aggr_group, y = values, group=within_factor)) +
geom_line(aes(linetype=within_factor) ) +
geom_point(aes(shape=within_factor))+
theme_bw()
library('devtools')
library("roxygen2")
setwd('C:/research/proj_neatstats/neatStats')
devtools::check()
devtools::check()
devtools::check()
library('devtools')
library("roxygen2")
setwd('C:/research/proj_neatstats/neatStats')
document()
# devtools::build_manual()
# devtools::check()
setwd('C:/research/proj_neatstats/')
#uninstall("neatStats")
install("neatStats", upgrade = "never")
# install("neatStats", upgrade = "never", quick = TRUE)
library("neatStats")
devtools::check()
setwd('C:/research/proj_neatstats/neatStats')
devtools::check()
devtools::check()
library('devtools')
library("roxygen2")
setwd('C:/research/proj_neatstats/neatStats')
document()
devtools::check()
library('devtools')
library("roxygen2")
setwd('C:/research/proj_neatstats/neatStats')
document()
devtools::check()
devtools::check()
devtools::check()

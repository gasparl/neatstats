),
within_ids = list(
color = c('green', 'red'),
valence = c('positive', 'negative')
),
bf_added = T
)
# table to show basic data
table_neat(
list(
aggr_neat(subjects_merged, rt_green_negative),
aggr_neat(subjects_merged, rt_green_positive),
aggr_neat(subjects_merged, rt_red_negative),
aggr_neat(subjects_merged, rt_red_positive),
aggr_neat(subjects_merged, er_green_negative),
aggr_neat(subjects_merged, er_green_positive),
aggr_neat(subjects_merged, er_red_negative),
aggr_neat(subjects_merged, er_red_positive)
),
group_by = 'condition'
)
p + theme_bw() + annotate(
geom = 'segment',
y = Inf,
yend = Inf,
x = -Inf,
xend = Inf
) + theme( panel.border = element_blank() )
library(ggplot2)
p <- ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point()
p + theme_bw() + annotate(
geom = 'segment',
y = Inf,
yend = Inf,
x = -Inf,
xend = Inf
) + theme( panel.border = element_blank() )
p + annotate(
geom = 'segment',
y = Inf,
yend = Inf,
x = -Inf,
xend = Inf
) + theme( panel.border = element_blank() )
p <- ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point()
p + annotate(
geom = 'segment',
y = Inf,
yend = Inf,
x = -Inf,
xend = Inf
) + theme( panel.border = element_blank() )
p + annotate(
geom = 'segment',
y = Inf,
yend = Inf,
x = -Inf,
xend = Inf
)
p <- ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point()
p + annotate(
geom = 'segment',
y = Inf,
yend = Inf,
x = -Inf,
xend = Inf
)
p <- ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point()
p + annotate(
geom = 'segment',
y = Inf,
yend = Inf,
x = -Inf,
xend = Inf
)
p + annotate(
geom = 'segment',
y = Inf,
yend = Inf,
x = -Inf,
xend = Inf
) + theme( panel.border = element_blank() )
p <- ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point()
p + annotate(
geom = 'segment',
y = Inf,
yend = Inf,
x = -Inf,
xend = Inf
)
p + theme_bw() + annotate(
geom = 'segment',
y = Inf,
yend = Inf,
x = -Inf,
xend = Inf
)
p + theme_bw() + annotate(
geom = 'segment',
y = Inf,
yend = Inf,
x = -Inf,
xend = Inf
) + theme( panel.border = element_blank() )
p + theme_bw() + annotate(
geom = 'segment',
y = Inf,
yend = Inf,
x = -Inf,
xend = Inf
) + theme( panel.border = element_blank(), element_line = () )
p + theme_bw() + annotate(
geom = 'segment',
y = Inf,
yend = Inf,
x = -Inf,
xend = Inf
) + theme( panel.border = element_blank(), axis.line = element_line() )
p <- ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point()
p +  annotate(
geom = 'segment',
y = Inf,
yend = Inf,
x = -Inf,
xend = Inf
) + theme( panel.border = element_blank(), axis.line = element_line() )
p <- ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point()
p +  annotate(
geom = 'segment',
y = Inf,
yend = Inf,
x = -Inf,
xend = Inf
) + theme(panel.border = element_blank(), axis.line = element_line())
p <- ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point()
p +  annotate(
geom = 'segment',
y = Inf,
yend = Inf,
x = -Inf,
xend = Inf
) + theme(panel.border = element_blank(), axis.line = element_line())
FALSE == "FALSE"
FALSE == "FALSES"
FALSE === "FALSE"
FALSE == "FALSE"
library(neatStats)
library(TOSTER)
rnorm(n = 10000, mean = 0, sd = sd_sim)
control_SD_sim = liar_SD * 0.5077 + 7.1245
rnorm(n = 10000, mean = 0, sd = control_SD_sim)
liar_SD = 30.45
control_SD_sim = liar_SD * 0.5077 + 7.1245
rnorm(n = 10000, mean = 0, sd = control_SD_sim)
results = bayestestR::distribution_normal(n = 10000, mean = 0, sd = sd_sim)
distr_norm = function(n, mean = 0, sd = 1) {
stats::qnorm(seq(1 / n, 1 - 1 / n, length.out = n))
}
results = distr_norm(n = 10000, mean = 0, sd = control_SD_sim)
results
writeClipboard(control_data_sim)
control_data_sim = distr_norm(n = 10000, mean = 0, sd = control_SD_sim)
writeClipboard(control_data_sim)
writeClipboard(as.character(control_data_sim))
control_data_sim
control_SD_sim
control_data_sim = bayestestR::distribution_normal(n = 10000, mean = 0, sd = control_SD_sim)
control_data_sim
distr_norm(n = 10000, mean = 0, sd = control_SD_sim)
distr_norm = function(n, mean = 0, sd = 1) {
stats::qnorm(seq(1 / n, 1 - 1 / n, length.out = n))
}
distr_norm(n = 10000, mean = 0, sd = control_SD_sim)
stats::qnorm(seq(1 / n, 1 - 1 / n, length.out = n), mean, sd)
distr_norm = function(n, mean = 0, sd = 1) {
stats::qnorm(seq(1 / n, 1 - 1 / n, length.out = n), mean, sd)
}
control_data_sim = distr_norm(n = 10000, mean = 0, sd = control_SD_sim)
control_data_sim
writeClipboard(as.character(control_data_sim))
citation('psychReport')
ip = as.data.frame(installed.packages()[,c(1,3:4)])
ip = ip[is.na(ip$Priority),1:2,drop=FALSE]
ip
library(schoRsch)
install.packages('scholar')
library(scholar)
get_publications("bg0BZ-QAAAAJ&hl")
xx = get_publications("bg0BZ-QAAAAJ&hl")
View(xx)
get_impactfactor("Quantitative Methods for Psychology")
get_impactfactor("The Quantitative Methods for Psychology")
get_impactfactor("Applied Psychology")
get_impactfactor("Methodology")
print "hi"
"hi"
5+8
pi = 3.141592654
radian = 24
pi*(radian**2)
str(2)
class()
class(2)
type(2)
typeof(2)
mode(2)
typeof("hi")
typeof(3)
typeof(3.3)
typeof(as.integer(3))
mode("hi")
mode(3)
### hi ####
print(1)
print(2)
list(1, "hi", "whatever")
my_list[2]
my_list = list( 14, "hi", "whatever")
my_list[2]
my_list[2][[1]]
my_list[[1]]
my_list[[2]]
my_list[[2:3]]
my_list[2:3]
?c
c('a', 2)
c(2, 'x')
c(2, list('x'))
c(14, 123, 6)
c(14, "some string")
6:23
22:1
2:6:1
seq(0, 10, by=2)
seq(4, 1, by=2)
seq(4, 1, by=-2)
rep(4, 5)
rep(12, 5)
rep("abc", 5)
?rep
rep(c(6,7), 5)
?seq
?c
help(":")
d = c(12,3,4,5,66)
d+1
d+2
plot(rnorm())
plot(rnorm(50))
density(rnorm(50))
plot(density(rnorm(50)))
density(rnorm(50))
plot(rnorm(50))
bayestestR::distribution_normal()
bayestestR::distribution_normal(50)
plot(bayestestR::distribution_normal(50))
plot()
?dump
sd(c(521, -1, 0, 0))
nchar("verständlich")
nchar(c("vertraut", "bekannt", "echt", "bedeutsam", "richtig", "wahrhaft", "sinnvoll", "tatsächlich", "gewusst", "geläufig", "verständlich"))
nchar("tatsächlich")
length(c("rützte", "girter", "zonsig", "fensch", "schwapf", "schlink", "kraubig", "behlsam", "hokisch", "noberal", "kriesam", "besärzt", "fosisch", "brirsam", "lathaft", "breuzig", "greibig", "glätisch", "weugvoll", "redengig", "gachligt", "verkemst", "pauflich", "heiglich", "wieflich", "schlinst", "plaucklos", "staumisch", "stürsisch", "kreibisch", "tintzlich", "brunenlos", "bänelich", "schriemrig", "klotselig", "gelörnsam"))
# neatStats usage example: pipeline from raw data to reportable statistics
library('neatStats') # load package
setwd(path_neat('example_data')) # set the result files' folder path as current working directory
filenames = list.files(pattern = "^expsim_color_valence_.*txt$") # get all result file names
if (exists('subjects_merged')) {
rm(subjects_merged)
}
for (file_name in filenames) {
# print current file name - just to monitor the process
cat(file_name, ' ', fill = TRUE)
# read the data with given file name
subject_data = read.table(
file_name,
stringsAsFactors = FALSE,
fill = TRUE,
header = TRUE
)
# check if trial number is correct
if (nrow(subject_data) != 100) {
stop("unexpected trial number: ", nrow(subject_data))
}
# now aggregate rt data per type
rts = aggr_neat(
subject_data,
rt,
group_by = c('color', 'valence'),
method = mean,
prefix = 'rt',
filt = (rt > 150 & response == 'correct')
)
# same with error rates; get ratio of 'incorrect'
ers = aggr_neat(
subject_data,
response,
group_by = c('color', 'valence'),
method = 'incorrect',
prefix = 'er',
filt = (response %in% c('correct', 'incorrect'))
)
# transpose to get the subject's data in one line
subject_line = table_neat(list(rts, ers), transpose = TRUE)
# get overall error rate
er_overall = aggr_neat(subject_data,
response,
method = 'incorrect',
filt = (response %in% c('correct', 'incorrect')))$aggr_value
# add extra data to the beginning of subject line
subject_line = data.frame(
subject_id = subject_data$subject_num[1],
condition = subject_data$condition[1],
gender = subject_data$gender[1],
age = subject_data$age[1],
er_overall = er_overall,
subject_line
)
# merge subject data
if (!exists("subjects_merged")) {
# if doesn't yet exist, create first line
subjects_merged = subject_line
} else {
# if exists, add next line
subjects_merged = rbind(subjects_merged, subject_line)
}
}
# data is ready for analysis as subjects_merged
# list column names to take a look and easily copy
str(subjects_merged)
# exclude subjects with overall error rate larger than 20%
data_final = subjects_merged[subjects_merged$er_overall < 0.20,]
# calculate number of exclusions and remaining sample
subjects_merged$remains = ifelse(subjects_merged$subject_id %in% data_final$subject_id,
'remained',
'excluded')
# list number of exclusions and remaining sample
aggr_neat(
dat = subjects_merged,
values = subject_id,
group_by = c('condition', 'remains'),
method = length
)
# print demographics
dems_neat(data_final, group_by = 'condition')
View(data_final)
plot_neat(
data_per_subject = data_final,
values = c(
'er_overall'
),
between_vars = c("gender",'condition')
)
anova_neat(
data_per_subject = data_final,
values = c(
'er_overall'
),
between_vars = c("gender",'condition')
)
View(data_final)
?anova_neat
dat_1 = data.frame(
subject = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
grouping1 = c(1, 1, 1, 1, 2, 2, 2, 2, 2, 2),
grouping2 = c(1, 2, 1, 2, 2, 1, 1, 1, 2, 1),
value_1_a = c(36.2, 45.2, 41, 24.6, 30.5, 28.2, 40.9, 45.1, 31, 16.9),
value_2_a = c(-14.1, 58.5, -25.5, 42.2, -13, 4.4, 55.5, -28.5, 25.6, -37.1),
value_1_b = c(83, 71, 111, 70, 92, 75, 110, 111, 110, 85),
value_2_b = c(8.024, -14.162, 3.1, -2.1, -1.5, 0.91, 11.53, 18.37, 0.3, -0.59),
value_1_c = c(27.4,-17.6,-32.7, 0.4, 37.2, 1.7, 18.2, 8.9, 1.9, 0.4),
value_2_c = c(7.7, -0.8, 2.2, 14.1, 22.1, -47.7, -4.8, 8.6, 6.2, 18.2)
)
anova_neat(dat_1,
values = 'value_1_a',
between_vars = c('grouping1', 'grouping2'))
library('devtools')
library("roxygen2")
setwd('C:/research/proj_neatstats/neatStats')
devtools::check()
devtools::check(args = '--run-donttest')
print('1')
library('devtools')
library("roxygen2")
setwd('C:/research/proj_neatstats/neatStats')
document()
--run-donttest
setwd('C:/research/proj_neatstats/')
#uninstall("neatStats")
install("neatStats", upgrade = "never")
# install("neatStats", upgrade = "never", quick = TRUE)
library("neatStats")
dat_1 = data.frame(
subject = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
grouping1 = c(1, 1, 1, 1, 2, 2, 2, 2, 2, 2),
grouping2 = c(1, 2, 1, 2, 2, 1, 1, 1, 2, 1),
value_1_a = c(36.2, 45.2, 41, 24.6, 30.5, 28.2, 40.9, 45.1, 31, 16.9),
value_2_a = c(-14.1, 58.5, -25.5, 42.2, -13, 4.4, 55.5, -28.5, 25.6, -37.1),
value_1_b = c(83, 71, 111, 70, 92, 75, 110, 111, 110, 85),
value_2_b = c(8.024, -14.162, 3.1, -2.1, -1.5, 0.91, 11.53, 18.37, 0.3, -0.59),
value_1_c = c(27.4,-17.6,-32.7, 0.4, 37.2, 1.7, 18.2, 8.9, 1.9, 0.4),
value_2_c = c(7.7, -0.8, 2.2, 14.1, 22.1, -47.7, -4.8, 8.6, 6.2, 18.2)
)
anova_neat(dat_1,
values = 'value_1_a',
between_vars = c('grouping1', 'grouping2'))
library('devtools')
library("roxygen2")
setwd('C:/research/proj_neatstats/neatStats')
document()
setwd('C:/research/proj_neatstats/')
#uninstall("neatStats")
install("neatStats", upgrade = "never")
# install("neatStats", upgrade = "never", quick = TRUE)
library("neatStats")
dat_1 = data.frame(
subject = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
grouping1 = c(1, 1, 1, 1, 2, 2, 2, 2, 2, 2),
grouping2 = c(1, 2, 1, 2, 2, 1, 1, 1, 2, 1),
value_1_a = c(36.2, 45.2, 41, 24.6, 30.5, 28.2, 40.9, 45.1, 31, 16.9),
value_2_a = c(-14.1, 58.5, -25.5, 42.2, -13, 4.4, 55.5, -28.5, 25.6, -37.1),
value_1_b = c(83, 71, 111, 70, 92, 75, 110, 111, 110, 85),
value_2_b = c(8.024, -14.162, 3.1, -2.1, -1.5, 0.91, 11.53, 18.37, 0.3, -0.59),
value_1_c = c(27.4,-17.6,-32.7, 0.4, 37.2, 1.7, 18.2, 8.9, 1.9, 0.4),
value_2_c = c(7.7, -0.8, 2.2, 14.1, 22.1, -47.7, -4.8, 8.6, 6.2, 18.2)
)
anova_neat(dat_1,
values = 'value_1_a',
between_vars = c('grouping1', 'grouping2'))
library('devtools')
library("roxygen2")
setwd('C:/research/proj_neatstats/neatStats')
document()
setwd('C:/research/proj_neatstats/')
#uninstall("neatStats")
install("neatStats", upgrade = "never")
# install("neatStats", upgrade = "never", quick = TRUE)
library("neatStats")
dat_1 = data.frame(
subject = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
grouping1 = c(1, 1, 1, 1, 2, 2, 2, 2, 2, 2),
grouping2 = c(1, 2, 1, 2, 2, 1, 1, 1, 2, 1),
value_1_a = c(36.2, 45.2, 41, 24.6, 30.5, 28.2, 40.9, 45.1, 31, 16.9),
value_2_a = c(-14.1, 58.5, -25.5, 42.2, -13, 4.4, 55.5, -28.5, 25.6, -37.1),
value_1_b = c(83, 71, 111, 70, 92, 75, 110, 111, 110, 85),
value_2_b = c(8.024, -14.162, 3.1, -2.1, -1.5, 0.91, 11.53, 18.37, 0.3, -0.59),
value_1_c = c(27.4,-17.6,-32.7, 0.4, 37.2, 1.7, 18.2, 8.9, 1.9, 0.4),
value_2_c = c(7.7, -0.8, 2.2, 14.1, 22.1, -47.7, -4.8, 8.6, 6.2, 18.2)
)
anova_neat(dat_1,
values = 'value_1_a',
between_vars = c('grouping1', 'grouping2'))
library('devtools')
library("roxygen2")
setwd('C:/research/proj_neatstats/neatStats')
document()
setwd('C:/research/proj_neatstats/')
#uninstall("neatStats")
install("neatStats", upgrade = "never")
# install("neatStats", upgrade = "never", quick = TRUE)
library("neatStats")
dat_1 = data.frame(
subject = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
grouping1 = c(1, 1, 1, 1, 2, 2, 2, 2, 2, 2),
grouping2 = c(1, 2, 1, 2, 2, 1, 1, 1, 2, 1),
value_1_a = c(36.2, 45.2, 41, 24.6, 30.5, 28.2, 40.9, 45.1, 31, 16.9),
value_2_a = c(-14.1, 58.5, -25.5, 42.2, -13, 4.4, 55.5, -28.5, 25.6, -37.1),
value_1_b = c(83, 71, 111, 70, 92, 75, 110, 111, 110, 85),
value_2_b = c(8.024, -14.162, 3.1, -2.1, -1.5, 0.91, 11.53, 18.37, 0.3, -0.59),
value_1_c = c(27.4,-17.6,-32.7, 0.4, 37.2, 1.7, 18.2, 8.9, 1.9, 0.4),
value_2_c = c(7.7, -0.8, 2.2, 14.1, 22.1, -47.7, -4.8, 8.6, 6.2, 18.2)
)
anova_neat(dat_1,
values = 'value_1_a',
between_vars = c('grouping1', 'grouping2'))
library('devtools')
library("roxygen2")
setwd('C:/research/proj_neatstats/neatStats')
document()
setwd('C:/research/proj_neatstats/')
#uninstall("neatStats")
install("neatStats", upgrade = "never")
# install("neatStats", upgrade = "never", quick = TRUE)
library("neatStats")
dat_1 = data.frame(
subject = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
grouping1 = c(1, 1, 1, 1, 2, 2, 2, 2, 2, 2),
grouping2 = c(1, 2, 1, 2, 2, 1, 1, 1, 2, 1),
value_1_a = c(36.2, 45.2, 41, 24.6, 30.5, 28.2, 40.9, 45.1, 31, 16.9),
value_2_a = c(-14.1, 58.5, -25.5, 42.2, -13, 4.4, 55.5, -28.5, 25.6, -37.1),
value_1_b = c(83, 71, 111, 70, 92, 75, 110, 111, 110, 85),
value_2_b = c(8.024, -14.162, 3.1, -2.1, -1.5, 0.91, 11.53, 18.37, 0.3, -0.59),
value_1_c = c(27.4,-17.6,-32.7, 0.4, 37.2, 1.7, 18.2, 8.9, 1.9, 0.4),
value_2_c = c(7.7, -0.8, 2.2, 14.1, 22.1, -47.7, -4.8, 8.6, 6.2, 18.2)
)
anova_neat(dat_1,
values = 'value_1_a',
between_vars = c('grouping1', 'grouping2'))
library('devtools')
library("roxygen2")
setwd('C:/research/proj_neatstats/neatStats')
document()
devtools::check(args = '--run-donttest')
library('devtools')
library("roxygen2")
setwd('C:/research/proj_neatstats/neatStats')
document()
devtools::check(args = '--run-donttest')
c(person("Gáspár", "Lukács", email = "lkcsgaspar@gmail.com",
role = c("aut", "cre"), comment = c(ORCID = "0000-0001-9401-4830")), person("Bennett", "Kleinberg", email = "bennettkleinberg@gmail.com", role = c("ctb"), comment = c(ORCID = "0000-0003-1658-9086")))
nchar('c("aut", "cre"), comment = c(ORCID = "0000-0001-9401-4830")), person("Bennett",')
nchar('An R Package for Neat and Painless Statistical Reporting')

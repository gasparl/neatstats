print(paste0('for Condition: ', row[1], ' count ', round(row[2],1), ' age = ', format(round(row[3],1), nsmall = 1), '±', format(round(row[4],1), nsmall = 1)) )
}
for_gender = full_data[,c("condition","gender")]
gender = data.frame(prop.table(table(for_gender), 1))
for(i in 1:(nrow(gender)/2)) {
row <- gender[i,]
print(paste0('for Condition: ', row[1], ' male ', format(round(row[3]*100,1), nsmall = 1), "%"))
}
# final summary ----
val_per_cond = function(values, percent = F, digits = 0){
val_name = unlist(strsplit(deparse( substitute( values )), "\\$") )[2]
full_data$zero = "0"
bylist = full_data$condition # full_data$condition or full_data$zero
if ( percent == T ) {
per_cond <- do.call(data.frame, aggregate( values, by = list(bylist), function(x) c(mean = ro(mean(x*100),digits+1), sd = ro(sd(x*100),digits+1))) )
} else {
per_cond <- do.call(data.frame, aggregate( values, by = list(bylist), function(x) c(mean = ro(mean(x), digits), sd = ro(sd(x), digits ) )) )
}
per_cond[val_name] = paste(per_cond$x.mean, per_cond$x.sd, sep="±")
per_cond = subset(per_cond, select=-c(x.mean,x.sd))
return(per_cond)
}
main_results = Reduce(function(x, y) merge(x, y, by = "Group.1", all=TRUE), list(
val_per_cond(full_data$rt_mean_probe, F)
, val_per_cond(full_data$rt_mean_irrelevant, F)
, val_per_cond(full_data$rt_mean_target, F)
, val_per_cond(full_data$rt_mean_diffs, F, 1)
, val_per_cond(full_data$rt_mean_selfrefitem, F)
, val_per_cond(full_data$rt_mean_otherref, F)
, val_per_cond(full_data$acc_rate_probe, T)
, val_per_cond(full_data$acc_rate_irrelevant, T)
, val_per_cond(full_data$acc_rate_target, T)
, val_per_cond(full_data$acc_rate_diffs, T, 1)
, val_per_cond(full_data$acc_rate_selfrefitem, T)
, val_per_cond(full_data$acc_rate_otherrefitem, T)
))
write.table(main_results, "C:/ecit/main_stats_table.txt", quote = F, row.names = F, sep="\t")
sort(c("a", "ss", "b") )
the_names = names(bfv)
the_names = gsub( " .*","", the_names )
the_names = sort( strsplit( the_names, ":" ) )
the_names
sort( strsplit( the_names, ":" ) )
strsplit( the_names, ":" )
sort(c("asdfsa","asew") )
sort("asew" )
the_names = names(bfv)
the_names = gsub( " .*","", the_names )
the_names
strsplit( the_names, ":" )
sort( strsplit( the_names, ":" ) )
for ( a_name in the_names) {
print(a_name)
}
the_names = names(bfv)
new_names = c()
for ( a_name in the_names) {
a_name = gsub( " .*","", a_name )
a_name = sort( strsplit( a_name, ":" ) )
print(a_name)
new_names = c(new_names, a_name)
}
a_name = gsub( " .*","", a_name )
a_name
a_name = sort( strsplit( a_name, ":" ) )
strsplit( a_name, ":" )
sort( strsplit( a_name, ":" ) )
":" in "asd:as"
grepl(":", "asdas:asdsa")
grepl(":", "asdassdsa")
a_name = gsub( " .*","", a_name )
the_names = names(bfv)
new_names = c()
for ( a_name in the_names) {
a_name = gsub( " .*","", a_name )
if ( grepl( ":", a_name ) ) {
a_name = sort( strsplit( a_name, ":" ) )
a_name = paste( a_name, collapse = " × " )
}
print(a_name)
new_names = c(new_names, a_name)
}
a_name
a_name = sort( strsplit( a_name, ":" ) )
a_name
strsplit( a_name, ":" )
sort( strsplit( a_name, ":" )[1] )
strsplit( a_name, ":" )[1]
strsplit( a_name, ":" )[[1]]
strsplit( a_name, ":" )[[1]]
sort( strsplit( a_name, ":" )[[1]]
a_name = sort( strsplit( a_name, ":" )[1] )
a_name = paste( a_name, collapse = " × " )
}
print(a_name)
new_names = c(new_names, a_name)
}
print(new_names)
the_names = gsub( " .*","", the_names )
the_names = sort( strsplit( the_names, ":" ) )
the_names = gsub( ":"," × ", the_names )
sort(c("a", "ss", "b") )
return( the_names )
}
bf_names( names(bfv) )
unname(bfv)[1]
## further ROCs; GLM ------
print("GLM AUCs:")
for(pair in list(c(0,3),c(1,4),c(2,5))) {
# pair =c(2,5)
print(paste("------------------------Conditions:", pair[1], pair[2]))
cit_data_glm = full_data[condition %in% pair,]
cit_data_glm$rt_mean_diffs = cit_data_glm$rt_mean_diffs/1000
log_regr  = glm(as.factor(condition) ~ (rt_mean_diffs) + (acc_rate_diffs), data = cit_data_glm, family = "binomial")
print(summary(log_regr))
show("nagelkerkeR2", nagelkerkeR2(log_regr),3)
print(wald.test(b = coef(log_regr), Sigma = vcov(log_regr), Terms = 2:3))
print(wald.test(b = coef(log_regr), Sigma = vcov(log_regr), Terms = 2))
print(wald.test(b = coef(log_regr), Sigma = vcov(log_regr), Terms = 3))
for_roc_log = log_regr$fitted.values
roc_log = roc(cit_data_glm$condition, for_roc_log, plot = F)
show_auc("Logistic predictor", roc_log)
print(coords(roc_log, "best"))
}
plot1 <- quote(plot(rocobj, main="Confidence intervals", print.auc=TRUE))
plot2 <- quote(plot(ci.se(rocobj, specificities=seq(0, 1, 0.1)), type="shape", col="#BBBBBB"))
plot3 <- quote(plot(ci(rocobj, of="thresholds", thresholds="best")))
doplots <- function(rocobj, calls) {
for (call in calls) {
eval(call)
}
invisible(rocobj)
}
doplots(x3, list(plot1, plot2, plot3))
# DEMS -----
write.table(full_data, "C:/ecit/data_for_spss.txt", quote = F, row.names = F, sep="\t")
sal_country = full_data$sal_country
sal_date = full_data$sal_date
sal_animal = full_data$sal_animal
print("Ratings:")
for(pair in list(list(sal_country,sal_date, "country-date"),list(sal_country,sal_animal, "country-animal"),list(sal_date,sal_animal, "date-animal"))) {
pair1 = pair[[1]]
#pair1 = pair1[!is.na(pair1)]
pair2 = pair[[2]]
#pair2 = pair2[!is.na(pair2)]
print(mean(pair1))
print(mean(pair2))
print(paste("------------------------Categories:", pair[3]))
cohen_d_within(pair1,pair2)
}
# DEMS -----
age = do.call(data.frame, aggregate( full_data$age, by = list(full_data$condition), function(x) c(count = length(x), mean = mean(x), sd = sd(x))) )
for(i in 1:nrow(age)) {
row <- age[i,]
print(paste0('for Condition: ', row[1], ' count ', round(row[2],1), ' age = ', format(round(row[3],1), nsmall = 1), '±', format(round(row[4],1), nsmall = 1)) )
}
for_gender = full_data[,c("condition","gender")]
gender = data.frame(prop.table(table(for_gender), 1))
for(i in 1:(nrow(gender)/2)) {
row <- gender[i,]
print(paste0('for Condition: ', row[1], ' male ', format(round(row[3]*100,1), nsmall = 1), "%"))
}
# final summary ----
val_per_cond = function(values, percent = F, digits = 0){
val_name = unlist(strsplit(deparse( substitute( values )), "\\$") )[2]
full_data$zero = "0"
bylist = full_data$condition # full_data$condition or full_data$zero
if ( percent == T ) {
per_cond <- do.call(data.frame, aggregate( values, by = list(bylist), function(x) c(mean = ro(mean(x*100),digits+1), sd = ro(sd(x*100),digits+1))) )
} else {
per_cond <- do.call(data.frame, aggregate( values, by = list(bylist), function(x) c(mean = ro(mean(x), digits), sd = ro(sd(x), digits ) )) )
}
per_cond[val_name] = paste(per_cond$x.mean, per_cond$x.sd, sep="±")
per_cond = subset(per_cond, select=-c(x.mean,x.sd))
return(per_cond)
}
main_results = Reduce(function(x, y) merge(x, y, by = "Group.1", all=TRUE), list(
val_per_cond(full_data$rt_mean_probe, F)
, val_per_cond(full_data$rt_mean_irrelevant, F)
, val_per_cond(full_data$rt_mean_target, F)
, val_per_cond(full_data$rt_mean_diffs, F, 1)
, val_per_cond(full_data$rt_mean_selfrefitem, F)
, val_per_cond(full_data$rt_mean_otherref, F)
, val_per_cond(full_data$acc_rate_probe, T)
, val_per_cond(full_data$acc_rate_irrelevant, T)
, val_per_cond(full_data$acc_rate_target, T)
, val_per_cond(full_data$acc_rate_diffs, T, 1)
, val_per_cond(full_data$acc_rate_selfrefitem, T)
, val_per_cond(full_data$acc_rate_otherrefitem, T)
))
write.table(main_results, "C:/ecit/main_stats_table.txt", quote = F, row.names = F, sep="\t")
strsplit( a_name, ":" )[[1]]
sort( strsplit( a_name, ":" )[[1]]  )
the_names = names(bfv)
new_names = c()
for ( a_name in the_names) {
a_name = gsub( " .*","", a_name )
if ( grepl( ":", a_name ) ) {
a_name = sort( strsplit( a_name, ":" )[[1]] )
a_name = paste( a_name, collapse = " × " )
}
print(a_name)
new_names = c(new_names, a_name)
}
print(new_names)
the_names = names(bfv)
new_names = c()
for ( a_name in the_names) {
print(a_name)
a_name = gsub( " .*","", a_name )
if ( grepl( ":", a_name ) ) {
a_name = sort( strsplit( a_name, ":" )[[1]] )
a_name = paste( a_name, collapse = " × " )
}
print(a_name)
new_names = c(new_names, a_name)
}
bf_names( names(bfv) )
names(bfv)
names(bfv) = bf_names( names(bfv) )
bfv
bfv = as.vector(bf)
bf_names = function( the_names ) {
new_names = c()
for ( a_name in the_names) {
print(a_name)
a_name = gsub( " .*","", a_name )
#if ( grepl( ":", a_name ) ) {
a_name = sort( strsplit( a_name, ":" )[[1]] )
a_name = paste( a_name, collapse = " × " )
#}
new_names = c(new_names, a_name)
}
return( the_names )
}
names(bfv) = bf_names( names(bfv) )
bfv
bfv = as.vector(bf)
bfv
bf_names = function( the_names ) {
new_names = c()
for ( a_name in the_names) {
print(a_name)
a_name = gsub( " .*","", a_name )
#if ( grepl( ":", a_name ) ) {
a_name = sort( strsplit( a_name, ":" )[[1]] )
a_name = paste( a_name, collapse = " × " )
#}
new_names = c(new_names, a_name)
}
return( the_names )
}
bf_names( names(bfv) )
the_names = names(bfv)
new_names = c()
for ( a_name in the_names) {
print(a_name)
a_name = gsub( " .*","", a_name )
if ( grepl( ":", a_name ) ) {
a_name = sort( strsplit( a_name, ":" )[[1]] )
a_name = paste( a_name, collapse = " × " )
}
print(a_name)
new_names = c(new_names, a_name)
}
the_names = names(bfv)
new_names = c()
for ( a_name in the_names) {
print(a_name)
a_name = gsub( " .*","", a_name )
a_name = sort( strsplit( a_name, ":" )[[1]] )
a_name = paste( a_name, collapse = " × " )
print(a_name)
new_names = c(new_names, a_name)
}
bf_names = function( the_names ) {
new_names = c()
for ( a_name in the_names) {
print(a_name)
a_name = gsub( " .*","", a_name )
if ( grepl( ":", a_name ) ) {
a_name = sort( strsplit( a_name, ":" )[[1]] )
a_name = paste( a_name, collapse = " × " )
}
new_names = c(new_names, a_name)
}
return( the_names )
}
names(bfv) = bf_names( names(bfv) )
bfv = as.vector(bf)
bf_names( names(bfv) )
bf_names = function( the_names ) {
new_names = c()
for ( a_name in the_names) {
a_name = gsub( " .*","", a_name )
if ( grepl( ":", a_name ) ) {
a_name = sort( strsplit( a_name, ":" )[[1]] )
a_name = paste( a_name, collapse = " × " )
}
new_names = c(new_names, a_name)
}
return( the_names )
}
bf_names( names(bfv) )
bf_names = function( the_names ) {
new_names = c()
for ( a_name in the_names) {
a_name = gsub( " .*","", a_name )
if ( grepl( ":", a_name ) ) {
a_name = sort( strsplit( a_name, ":" )[[1]] )
a_name = paste( a_name, collapse = " × " )
}
new_names = c(new_names, a_name)
}
return( new_names )
}
bf_names( names(bfv) )
bf_names = function( the_names ) {
new_names = c()
for ( a_name in the_names) {
a_name = gsub( " .*","", a_name )
a_name = sort( strsplit( a_name, ":" )[[1]] )
a_name = paste( a_name, collapse = " × " )
new_names = c(new_names, a_name)
}
return( new_names )
}
bfv = as.vector(bf)
bf_names = function( the_names ) {
new_names = c()
for ( a_name in the_names) {
a_name = gsub( " .*","", a_name )
a_name = sort( strsplit( a_name, ":" )[[1]] )
a_name = paste( a_name, collapse = " × " )
new_names = c(new_names, a_name)
}
return( new_names )
}
bf_names( names(bfv) )
names(bfv)
names(bfv) = bf_names( names(bfv) )
bfv
bfv["guilt × item_types"]
bf = as.vector( anovaBF(values ~ version * guilt * item_types + subject_id , data = sal_long, whichRandom = "subject_id", whichModels = "bottom") )
bf_names = function( the_names ) {
new_names = c()
for ( a_name in the_names) {
a_name = gsub( " .*","", a_name )
a_name = sort( strsplit( a_name, ":" )[[1]] )
a_name = paste( a_name, collapse = " × " )
new_names = c(new_names, a_name)
}
return( new_names )
}
names( bf ) = bf_names( names( bf ) )
bf
source("C:/research/neatStats.R")
anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id", between_vars = "guilt, version", within_vars = "item_types" )
source("C:/research/neatStats.R")
anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id", between_vars = "guilt, version", within_vars = "item_types" )
source("C:/research/neatStats.R")
anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id", between_vars = "guilt, version", within_vars = "item_types" )
source("C:/research/neatStats.R")
anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id", between_vars = "guilt, version", within_vars = "item_types" )
T | F
T || F
'a' %in% 'asdsa'
'a' %in% c('a','sdsa')
'x' %in% c('a','sdsa')
names( bf )
"guilt × item_types" %in% names( bf )
!( F | T)
( F | T)
(! F | T)
!( F | T)
!( F )
( ! F )
source("C:/research/neatStats.R")
anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id", between_vars = "guilt, version", within_vars = "item_types" )
1/0.303455
1/0.7324440
1/1.0357420
anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id", between_vars = "guilt, version"  )
anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id",  within_vars = "item_types" )
source("C:/research/neatStats.R")
anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id", between_vars = "guilt, version", within_vars = "item_types" )
source("C:/research/neatStats.R")
anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id", between_vars = "guilt, version", within_vars = "item_types" )
install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
script_path()
setwd( script_path() )
getwd()
create("neatStats")
setwd("./neatStats")
document()
document()
setwd( script_path() )
install("neatStats")
install_github("gasparl/neatstats")
?anova_neat
anova_neat
neatStats::
neatStats
?neatStats
t_neat
neatStats::t_neat
document()
setwd( script_path() )
getwd()
setwd( paste0( script_path(), '/proj_neatstats/neatStats')  )
setwd( paste0( script_path(), '/neatStats')  )
getwd()
document()
document()
document()
document()
gsub('-', '–', "dsa-asd" )
gsub('-', '\code{–}', "dsa-asd" )
gsub('-', '\{–}', "dsa-asd" )
gsub('-', '\–', "dsa-asd" )
gsub('-', '\\–', "dsa-asd" )
gsub('-s', '\\–', "dsa-asd" )
document()
gsub('-', '\u2013', "dsa-asd" )
gsub('-', '\u2013', "AA-BB" )
gsub('-', '\xe2\x80\x93', "AA-BB" )
cat('\u2013')
cat('\u2013')
document()
document()
document()
document()
neatStats::t_neat
neatStats::prnt
prnt
neatStats::anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id",  within_vars = "item_types" )
neatStats::anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id",  between_vars = "guilt, version",  within_vars = "item_types" )
t_neat(rt_probe,rt_irr, pair = T, for_table = T, greater = "1" )
t_neat(rt_probe,rt_irr, pair = T, for_table = T, greater = "2" )
t_neat(rt_probe,rt_irr, pair = T, for_table = T )
main_results = Reduce(function(x, y) merge(x, y, by = "Group.1", all=TRUE), list(
val_per_cond(full_data$rt_mean_probe, F)
, val_per_cond(full_data$rt_mean_irrelevant, F)
, val_per_cond(full_data$rt_mean_target, F)
, val_per_cond(full_data$rt_mean_diffs, F, 1)
, val_per_cond(full_data$rt_mean_selfrefitem, F)
, val_per_cond(full_data$rt_mean_otherref, F)
, val_per_cond(full_data$acc_rate_probe, T)
, val_per_cond(full_data$acc_rate_irrelevant, T)
, val_per_cond(full_data$acc_rate_target, T)
, val_per_cond(full_data$acc_rate_diffs, T, 1)
, val_per_cond(full_data$acc_rate_selfrefitem, T)
, val_per_cond(full_data$acc_rate_otherrefitem, T)
))
View(main_results)
val_per_cond
main_results = Reduce(function(x, y) merge(x, y, by = "Group.1", all=TRUE), list(
val_per_cond(full_data$rt_mean_probe, F)
, neatStats:val_per_cond(full_data$rt_mean_irrelevant, F)
, val_per_cond(full_data$rt_mean_target, F)
, val_per_cond(full_data$rt_mean_diffs, F, 1)
, val_per_cond(full_data$rt_mean_selfrefitem, F)
, val_per_cond(full_data$rt_mean_otherref, F)
, val_per_cond(full_data$acc_rate_probe, T)
, val_per_cond(full_data$acc_rate_irrelevant, T)
, val_per_cond(full_data$acc_rate_target, T)
, val_per_cond(full_data$acc_rate_diffs, T, 1)
, val_per_cond(full_data$acc_rate_selfrefitem, T)
, val_per_cond(full_data$acc_rate_otherrefitem, T)
))
neatStats::prnt
main_results = Reduce(function(x, y) merge(x, y, by = "Group.1", all=TRUE), list(
val_per_cond(full_data$rt_mean_probe, F)
, neatStats::val_per_cond(full_data$rt_mean_irrelevant, F)
, val_per_cond(full_data$rt_mean_target, F)
, val_per_cond(full_data$rt_mean_diffs, F, 1)
, val_per_cond(full_data$rt_mean_selfrefitem, F)
, val_per_cond(full_data$rt_mean_otherref, F)
, val_per_cond(full_data$acc_rate_probe, T)
, val_per_cond(full_data$acc_rate_irrelevant, T)
, val_per_cond(full_data$acc_rate_target, T)
, val_per_cond(full_data$acc_rate_diffs, T, 1)
, val_per_cond(full_data$acc_rate_selfrefitem, T)
, val_per_cond(full_data$acc_rate_otherrefitem, T)
))
neatStats::val_per_cond
main_x = Reduce(function(x, y) merge(x, y, by = "Group.1", all=TRUE), list(
neatStats::val_per_cond(full_data$rt_mean_probe, F)
, neatStats::val_per_cond(full_data$rt_mean_irrelevant, F)
, neatStats::val_per_cond(full_data$rt_mean_target, F)
, neatStats::val_per_cond(full_data$rt_mean_diffs, F, 1)
, neatStats::val_per_cond(full_data$rt_mean_selfrefitem, F)
, neatStats::val_per_cond(full_data$rt_mean_otherref, F)
, neatStats::val_per_cond(full_data$acc_rate_probe, T)
, neatStats::val_per_cond(full_data$acc_rate_irrelevant, T)
, neatStats::val_per_cond(full_data$acc_rate_target, T)
, neatStats::val_per_cond(full_data$acc_rate_diffs, T, 1)
, neatStats::val_per_cond(full_data$acc_rate_selfrefitem, T)
, neatStats::val_per_cond(full_data$acc_rate_otherrefitem, T)
))
View(main_x)
neatStats::prnt
document()
document()
prnt
rm(list=ls(all=TRUE))
prnt
neatStats
neatStats::prnt

print(10519152.5173)
print( ro( the_num, 2 ) > 9999.99 )
to_exp = function( the_num ) {
print('to_exp')
print(the_num)
print(ro( the_num, 2 ) )
print( ro( the_num, 2 ) > 9999.99 )
if ( ro( the_num, 2 ) > 9999.99 ) {
the_num = formatC( the_num, format = "e", digits = 2)
return( the_num )
} else {
return( ro(the_num, 2) )
}
}
bf_neat = function( bf ) {
if ( bf < 1 ) {
bf2 = 1/bf
bf2 = to_exp( bf2 )
bf_dir = paste0( ", BF01 = ", bf2 )
} else {
bf2 = to_exp( bf )
print('bf2')
print( bf2 )
bf_dir = paste0( ", BF10 = ", bf2 )
}
return( paste0( bf_dir, ". (BFplain = ", ro(bf, 4), ")" ) )
}
bf_neat(10519152.5173)
to_exp = function( the_num ) {
print('to_exp')
print(the_num)
print(ro( the_num, 2 ) )
print( as.numeric( ro( the_num, 2 ) ) > 9999.99 )
if ( ro( the_num, 2 ) > 9999.99 ) {
the_num = formatC( the_num, format = "e", digits = 2)
return( the_num )
} else {
return( ro(the_num, 2) )
}
}
bf_neat = function( bf ) {
if ( bf < 1 ) {
bf2 = 1/bf
bf2 = to_exp( bf2 )
bf_dir = paste0( ", BF01 = ", bf2 )
} else {
bf2 = to_exp( bf )
print('bf2')
print( bf2 )
bf_dir = paste0( ", BF10 = ", bf2 )
}
return( paste0( bf_dir, ". (BFplain = ", ro(bf, 4), ")" ) )
}
bf_neat(10519152.5173)
if ( as.numeric( ro( the_num, 2 ) ) > 9999.99 ) {
the_num = formatC( the_num, format = "e", digits = 2)
return( the_num )
} else {
return( ro(the_num, 2) )
}
to_exp = function( the_num ) {
print('to_exp')
print(the_num)
print(ro( the_num, 2 ) )
print( as.numeric( ro( the_num, 2 ) ) > 9999.99 )
if ( as.numeric( ro( the_num, 2 ) ) > 9999.99 ) {
the_num = formatC( the_num, format = "e", digits = 2)
return( the_num )
} else {
return( ro(the_num, 2) )
}
}
bf_neat = function( bf ) {
if ( bf < 1 ) {
bf2 = 1/bf
bf2 = to_exp( bf2 )
bf_dir = paste0( ", BF01 = ", bf2 )
} else {
bf2 = to_exp( bf )
print('bf2')
print( bf2 )
bf_dir = paste0( ", BF10 = ", bf2 )
}
return( paste0( bf_dir, ". (BFplain = ", ro(bf, 4), ")" ) )
}
bf_neat(10519152.5173)
install("neatStats")
library("neatStats")
to_exp = function( the_num ) {
print('to_exp')
print(the_num)
print(ro( the_num, 2 ) )
print( as.numeric( ro( the_num, 2 ) ) > 9999.99 )
if ( as.numeric( ro( the_num, 2 ) ) > 9999.99 ) {
the_num = formatC( the_num, format = "e", digits = 2)
return( the_num )
} else {
return( ro(the_num, 2) )
}
}
bf_neat = function( bf ) {
if ( bf < 1 ) {
bf2 = 1/bf
bf2 = to_exp( bf2 )
bf_dir = paste0( ", BF01 = ", bf2 )
} else {
bf2 = to_exp( bf )
print('bf2')
print( bf2 )
bf_dir = paste0( ", BF10 = ", bf2 )
}
return( paste0( bf_dir, ". (BFplain = ", ro(bf, 4), ")" ) )
}
bf_neat(10519152.5173)
neatStats::anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id",  within_vars = "item_types" )
neatStats::anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id",  between_vars = "guilt, version",  within_vars = "item_types" )
t_neat(cit_data_cond$rt_mean_diffs[cit_data_cond$condition == "2"], cit_data_cond$rt_mean_diffs[cit_data_cond$condition == "5"], pair = F, for_table = T)
t_neat(rt_probe,rt_irr, pair = T, for_table = T, greater = "1" )
t_neat(rt_probe,rt_irr, pair = T, for_table = T, greater = "2" )
cat('\xc3\x97')
cat('\u00d7')
install("neatStats")
library("neatStats")
t_neat(rt_probe,rt_irr, pair = T, for_table = T, greater = "1" )
install("neatStats")
t_neat(rt_probe,rt_irr, pair = T, for_table = T, greater = "2" )
install("neatStats")
t_neat(rt_probe,rt_irr, pair = T, for_table = T, greater = "2" )
install("neatStats")
t_neat(rt_probe,rt_irr, pair = T, for_table = T )
install("neatStats")
t_neat(rt_probe,rt_irr, pair = T, for_table = T, greater = "2" )
install("neatStats")
t_neat(rt_probe,rt_irr, pair = T, for_table = T, greater = "2" )
cat('\u00d7')
xx = gsub('hi', '\u00d7', "AAhiBB" )
xx
cat(xx)
cat('\u00d7')
xx = gsub('hi', '\u00d7', "AAhiBB" )
cat(xx)
xx = gsub('hi', '\u00d7', "AAhiBB" )
Encoding(xx) <- "UTF-8"
cat(xx)
install("neatStats")
t_neat(rt_probe,rt_irr, pair = T, for_table = T )
t_neat(rt_probe,rt_irr, pair = T, for_table = T, greater = "1" )
t_neat(rt_probe,rt_irr, pair = T, for_table = T, greater = "2" )
neatStats::anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id",  between_vars = "guilt, version",  within_vars = "item_types" )
install("neatStats")
library("neatStats")
xx = gsub('hi', '\u00d7', "AAhiBB" )
Encoding(xx)
Encoding(xx) <- "UTF-8"
Encoding(xx)
neatStats::anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id",  between_vars = "guilt, version",  within_vars = "item_types" )
substring(x, 2, nchar(x))
x = "asdasd"
substring(x, 2, nchar(x))
sub('.', '', x)
sub('.', '', '0.003')
sub('.', '', '0.3003')
sub('.', '', '10.3003')
sub('0', '', '10.3003')
sub('0', '', '0.3003')
install("neatStats")
neatStats::anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id",  between_vars = "guilt, version",  within_vars = "item_types" )
install("neatStats")
neatStats::anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id",  between_vars = "guilt, version",  within_vars = "item_types" )
install("neatStats")
neatStats::anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id",  between_vars = "guilt, version",  within_vars = "item_types" )
install("neatStats")
neatStats::anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id",  between_vars = "guilt, version",  within_vars = "item_types" )
t_neat(rt_probe,rt_irr, pair = T, for_table = T, greater = "1" )
t_neat(rt_probe,rt_irr, pair = T, for_table = T, greater = "2" )
t_neat(rt_probe,rt_irr, pair = T, for_table = T )
install("neatStats")
setwd( 'C:/research/proj_neatstats/' )
t_neat
install("neatStats")
library('devtools')
library(roxygen2)
install("neatStats")
# COLLECT DATA ----
cohen_d_cit = function(probe_rts, irr_rts){
return = (mean(probe_rts) - mean(irr_rts)) / sd(irr_rts)
}
ro = function(value, round_to = 2) {
return(format(round(value, round_to), nsmall = round_to))
}
cohen_d_within = function(var1, var2, for_table = T){
ttest = t.test(var1, var2, paired=T)
t = as.vector(ttest$statistic)
df = as.vector(ttest$parameter)
pvalue = ttest$p.value
sm = ci.sm(ncp = ttest$statistic, N = length(var1), conf.level = .95)
d = sm$Standardized.Mean
if (for_table == T) {
out = paste("t(", df, ")", " = ", ro(t), ", p = ", ro(pvalue,3), ", dwithin = ", ro(d, 2), " [", ro(sm$Lower.Conf.Limit.Standardized.Mean, 2), ", ", ro(sm$Upper.Conf.Limit.Standardized.Mean, 2), "].", sep="")
} else {
out = paste("t(", df, ")", " = ", ro(t), ", p = ", ro(pvalue,3), ", dwithin = ", ro(d, 2), ", 95% CI [", ro(sm$Lower.Conf.Limit.Standardized.Mean, 2), ", ", ro(sm$Upper.Conf.Limit.Standardized.Mean, 2), "].", sep="")
}
print(out)
}
cohen_d_between = function(outcome, categ, for_table = T){
ttest = t.test(outcome ~ categ)
t = as.vector(ttest$statistic)
df = as.vector(ttest$parameter)
pvalue = ttest$p.value
table_categ = as.data.frame(table(categ))
table_categ$Freq[table_categ$Freq == 0] = NA
table_categ = na.omit(table_categ)
n1 = table_categ[1,2]
n2 = table_categ[2,2]
the_smd = ci.smd(ncp = t, n.1 = n1, n.2 = n2, conf.level = .95)
if (for_table == T) {
out = paste("t(", ro(df,1), ")", " = ", ro(t), ", p = ", ro(pvalue, 3), ", dbetween = ", ro(the_smd$smd, 2), " [", ro(the_smd$Lower.Conf.Limit.smd, 2), ", ", ro(the_smd$Upper.Conf.Limit.smd, 2), "].", sep="")
} else {
out = paste("t(", ro(df,1), ")", " = ", ro(t), ", p = ", ro(pvalue, 3), ", dbetween = ", ro(the_smd$smd, 2), ", 95% CI [", ro(the_smd$Lower.Conf.Limit.smd, 2), ", ", ro(the_smd$Upper.Conf.Limit.smd, 2), "].", sep="")
}
print(out)
}
anova_apa = function( ezANOVA_out ) {
ezANOVA_out = aovEffectSize(ezANOVA_out, "pes")
print(ezANOVA_out)
for (indx in 1:length( ezANOVA_out$ANOVA$Effect )){
f_name = gsub(":", " x ", ezANOVA_out$ANOVA$Effect[indx] )
F_val = ezANOVA_out$ANOVA$F[indx]
df_n = ezANOVA_out$ANOVA$DFn[indx]
df_d = ezANOVA_out$ANOVA$DFd[indx]
pvalue = ezANOVA_out$ANOVA$p[indx]
if ( ro(pvalue,3) == "0.000" ) {
p_display = "p < 0.001"
} else {
p_display = paste( "p = ", ro(pvalue,3), sep = "")
}
petas = ezANOVA_out$ANOVA$pes[indx]
limits = conf.limits.ncf(F.value = F_val, conf.level = .90, df.1 = df_n, df.2 = df_d )
lower = limits$Lower.Limit / (limits$Lower.Limit + df_n + df_d + 1)
upper = limits$Upper.Limit / (limits$Upper.Limit + df_n + df_d + 1)
lower[is.na(lower)] = 0
upper[is.na(upper)] = 0
out = paste( "F(", df_n, ",", df_d, ")", " = ", ro(F_val, 2), ", ", p_display, ", np2 = ", ro(petas, 3), ", 90% CI [", ro(lower, 3), ", ", ro(upper, 3), "]. (", f_name, ")", sep="")
print(out)
}
}
# formula for partial eta-squared is equation 13 from Lakens (2013), while that for its confidence intervals is equation 5.6 in chapter 5 of Smithson's Confidence Intervals (2003, pp. 42â€“66)
show = function(title, value, round_to = 2) {
print(paste(title, "=", format(round(value, round_to), nsmall = round_to)))
}
show_auc = function(title, theroc, for_table = T, round_to = 3) {
if (for_table == T) {
print(paste(title, " AUC = ", format(round(as.numeric(auc(theroc)), round_to), nsmall = round_to), " [", format(round(as.numeric(ci(theroc))[1], round_to), nsmall = round_to), ", ", format(round(as.numeric(ci(theroc))[3], round_to), nsmall = round_to), "]", sep = ""))
} else {
print(paste(title, " AUC = ", format(round(as.numeric(auc(theroc)), round_to), nsmall = round_to), ", 95% CI [", format(round(as.numeric(ci(theroc))[1], round_to), nsmall = round_to), ", ", format(round(as.numeric(ci(theroc))[3], round_to), nsmall = round_to), "]", sep = ""))
}
}
#categs_to_test = list("countries","dates","animals")
#categs_to_test = list("countries","dates","animals")[1]
setwd( paste0( script_path(), '/results/cit_leak_exp2/part') )
file_names = list.files(pattern = "^ECIT_Leak.*txt$")
if ( exists("main_cit_merg") ) {
rm(main_cit_merg)
}
for(f_name in file_names){
#f_name = "ECIT_Leak_0_YAC_44088126.txt"
print(f_name)
subj_data = read.table(f_name, sep="\t", header=TRUE, fill=TRUE, quote="\"")
subj_data$stim_type <- as.character(subj_data$stim_type)
subj_data$stim_type[grepl('^irrelevant', subj_data$stim_type)] = "irrelevant"
subj_data$stim_type <- factor(subj_data$stim_type)
subj_items = subj_data[which( subj_data$block_number %in% list(4,5,6,7) & subj_data$stim_type %in% list("probe", "irrelevant", "selfrefitem", "otherrefitem", "target") ),]
# the_country = as.character(subj_items[subj_items$category == "countries",]$stimulus_shown[1])
# print(the_country)
# if ( grepl("\\s", the_country) ) {
#     print("---------------- contains whitespace")
#
# } else {
#     print("no whitespace")
#     next
# }
# temp_raw = na.omit(subj_data, cols=c("incorrect"))
# if ( exists("all_raw_data") ) {
#     all_raw_data =  merge( all_raw_data, temp_raw, all = T)
# } else {
#     all_raw_data = temp_raw
# }
# all_raw_data$rt = ifelse(all_raw_data$too_slow == 1, 0, all_raw_data$rt)
# all_raw_data$subject_id = substr(all_raw_data$subject_id, 1, 7)
# all_raw_data = subset(all_raw_data, select=-c(stimulus_shown,date_in_ms))
# write.table(all_raw_data, "C:/ecit/full_raw_exp2_leakage.txt", quote = F, row.names = F, sep="\t")
subj_items$valid_trial = ifelse(subj_items$incorrect == 0 & subj_items$too_slow == 0 & subj_items$rt >= 150, 1, 0)
subj_cond = as.character(subj_items$condition[1])
subj_overall_acc <-aggregate( subj_items$valid_trial, by = list(subj_items$stim_type), FUN = mean)
subj_overall_acc$Group.1 = paste("overall_acc", subj_overall_acc$Group.1, sep="_")
subj_overall_acc = dcast(setDT(subj_overall_acc), .~Group.1, value.var=c("x"))
subj_overall_acc$main_overall_acc = ((subj_overall_acc$overall_acc_probe) + subj_overall_acc$overall_acc_irrelevant * 4) / 5
subj_items = subj_items[subj_items$rt >= 150,]
subj_valid_items = subj_items[subj_items$valid_trial==1,]
subj_acc_rates <-aggregate( subj_items$valid_trial, by = list(subj_items$stim_type), FUN = mean)
subj_acc_rates$Group.1 = paste("acc_rate", subj_acc_rates$Group.1, sep="_")
subj_rt_mean <-aggregate( subj_valid_items$rt, by = list(subj_valid_items$stim_type), FUN = mean)
subj_rt_mean$Group.1 = paste("rt_mean", subj_rt_mean$Group.1, sep="_")
subj_rt_median <-aggregate( subj_valid_items$rt, by = list(subj_valid_items$stim_type), FUN = median)
subj_rt_median$Group.1 = paste("rt_median", subj_rt_median$Group.1, sep="_")
subject_line = Reduce(function(x, y) merge(x, y, all=TRUE), list(subj_rt_mean, subj_rt_median, subj_acc_rates))
for (categ in list("countries","dates","animals")) {
sub_it_categ = subj_items[subj_items$category %in% categ,]
sub_it__val_categ = subj_valid_items[subj_valid_items$category %in% categ,]
subj_acc_rates <-aggregate( sub_it_categ$valid_trial, by = list(sub_it_categ$stim_type), FUN = mean)
subj_acc_rates$Group.1 = paste("acc_rate", subj_acc_rates$Group.1, categ, sep="_")
subj_rt_mean <-aggregate( sub_it__val_categ$rt, by = list(sub_it__val_categ$stim_type), FUN = mean)
subj_rt_mean$Group.1 = paste("rt_mean", subj_rt_mean$Group.1, categ, sep="_")
subj_rt_median <-aggregate( sub_it__val_categ$rt, by = list(sub_it__val_categ$stim_type), FUN = median)
subj_rt_median$Group.1 = paste("rt_median", subj_rt_median$Group.1, categ, sep="_")
subject_line = Reduce(function(x, y) merge(x, y, all=TRUE), list(subject_line, subj_rt_mean, subj_rt_median, subj_acc_rates))
}
subject_line = dcast(setDT(subject_line), .~Group.1, value.var=c("x"))
subject_line$subj_coh_d_cit = cohen_d_cit(subj_valid_items$rt[subj_valid_items$stim_type == "probe"],  subj_valid_items$rt[subj_valid_items$stim_type == "irrelevant"])
subject_line$rt_mean_diffs = subject_line$rt_mean_probe-subject_line$rt_mean_irrelevant
subject_line$rt_median_diffs = subject_line$rt_median_probe-subject_line$rt_median_irrelevant
subject_line$acc_rate_diffs = subject_line$acc_rate_probe-subject_line$acc_rate_irrelevant
for (categ in list("countries","dates","animals")) {
rt_mean_diffs_curr = paste("rt_mean_diffs", categ, sep="_")
rt_median_diffs_curr = paste("rt_median_diffs", categ, sep="_")
acc_rate_diffs_curr = paste("acc_rate_diffs", categ, sep="_")
subject_line[[rt_mean_diffs_curr]] = subject_line[[paste("rt_mean_probe", categ, sep="_")]]-subject_line[[paste("rt_mean_irrelevant", categ, sep="_")]]
subject_line[[rt_median_diffs_curr]] = subject_line[[paste("rt_median_probe", categ, sep="_")]]-subject_line[[paste("rt_median_irrelevant", categ, sep="_")]]
subject_line[[acc_rate_diffs_curr]] = subject_line[[paste("acc_rate_probe", categ, sep="_")]]-subject_line[[paste("acc_rate_irrelevant", categ, sep="_")]]
}
subject_line = merge(subject_line, subj_overall_acc, by = ".", all = TRUE)
names(subject_line)[names(subject_line) == "."] <- "subject_id"
subject_line$subject_id = as.character(subj_items$subject_id[1])
subject_line$condition = subj_cond
if ( exists("main_cit_merg") ) { # add subject aggregations
main_cit_merg = rbind.fill(main_cit_merg, subject_line)
} else {
main_cit_merg = subject_line
}
}
main_cit_data <- main_cit_merg[order(main_cit_merg$condition, main_cit_merg$subject_id),]
main_cit_data = data.table(main_cit_data)
# main_cit_data = main_cit_data[!(main_cit_data$subject_id %in% failed_probe_check),]
main_cit_data = main_cit_data[is.na(main_cit_data$overall_acc_target) | main_cit_data$overall_acc_target > 0.5,]
main_cit_data = main_cit_data[is.na(main_cit_data$overall_acc_otherrefitem) | main_cit_data$overall_acc_otherrefitem > 0.5,]
main_cit_data = main_cit_data[is.na(main_cit_data$overall_acc_selfrefitem) | main_cit_data$overall_acc_selfrefitem > 0.5,]
main_cit_data = main_cit_data[main_cit_data$main_overall_acc > 0.75,]
main_cit_merg$remaining = ifelse(main_cit_merg$subject_id %in% main_cit_data$subject_id, 1, 0)
excluded_nums = do.call(data.frame, aggregate( main_cit_merg$overall_acc_selfrefitem, by = list(main_cit_merg$condition, main_cit_merg$remaining), function(x) c(count = length(x), mean = mean(x), sd = sd(x))) )
for(i in 1:nrow(excluded_nums)) {
row <- excluded_nums[i,]
print(paste('for Condition:', row[1], 'remaining:', row[2], 'count', round(row[3],2), 'LexTALE score =', round(row[4],2), '+', round(row[5],2)))
}
demographics = read.table("demographics_ECIT_Leak.txt", sep="\t", header=TRUE, fill=TRUE)
full_data = merge(x = main_cit_data, y = demographics, by = "subject_id", all = TRUE)
lex_dems = read.table("dems_lextale_ECIT_Leak.txt", sep="\t", header=TRUE, fill=TRUE)
lex_dems$completed = ifelse(lex_dems$subject_id %in% main_cit_data$subject_id, 1, 0)
dropout_nums = do.call(data.frame, aggregate( lex_dems$lextale_score, by = list(lex_dems$condition, lex_dems$completed), function(x) c(count = length(x), mean = mean(x), sd = sd(x))) )
for(i in 1:nrow(dropout_nums)) {
row <- dropout_nums[i,]
print(paste('for Condition:', row[1], 'completion:', row[2], 'count', round(row[3],2), 'LexTALE score =', round(row[4],2), '+', round(row[5],2)))
}
names(full_data)[names(full_data) == "condition.x"] <- "condition"
full_data = na.omit(full_data, cols=c("rt_mean_irrelevant", "rt_median_irrelevant", "acc_rate_irrelevant"))
full_data = full_data[full_data$probe_check_failed == 0,]
#full_data = full_data[full_data$probe_check_failed > 0,]
main_cit_data$remaining = ifelse(main_cit_data$subject_id %in% full_data$subject_id, 1, 0)
norecall_nums = do.call(data.frame, aggregate( main_cit_data$subj_coh_d_cit, by = list(main_cit_data$condition, main_cit_data$remaining), function(x) c(count = length(x), mean = mean(x), sd = sd(x))) )
for(i in 1:nrow(norecall_nums)) {
row <- norecall_nums[i,]
print(paste('for Condition:', row[1], 'remaining:', row[2], 'count', round(row[3],2), 'd-CIT =', round(row[4],2), '+', round(row[5],2)))
}
for(cond in list(0,1,2,3,4,5)) {  # 0,1,2,3,4,5
cit_data_cond = full_data[condition==cond,]
#cit_data_cond = full_data[condition==5,]
rt_probe = cit_data_cond$rt_mean_probe
rt_irr = cit_data_cond$rt_mean_irrelevant
acc_probe = cit_data_cond$acc_rate_probe
acc_irr = cit_data_cond$acc_rate_irrelevant
print("::::::::::::::::::::::::::::::CONDITION::::::::::::::::::::::::::::::::::::")
print(cond)
print("mean RT:")
cohen_d_within(rt_probe,rt_irr)
cat( as.vector( ttestBF( rt_probe,rt_irr, paired = T ) ) )
print(".")
print("Acc:")
cohen_d_within(acc_probe,acc_irr)
print( as.vector( ttestBF( acc_probe,acc_irr, paired = T ) ) )
print("")
}
t_neat(rt_probe,rt_irr, pair = T, for_table = T, greater = "1" )
library("neatStats")
t_neat(rt_probe,rt_irr, pair = T, for_table = T, greater = "2" )
install("neatStats")
t_neat(rt_probe,rt_irr, pair = T, for_table = T )
install("neatStats")
t_neat(rt_probe,rt_irr, pair = T, for_table = T )
install("neatStats")
t_neat(rt_probe,rt_irr, pair = T, for_table = T )
t_neat(rt_probe,rt_irr, pair = T, for_table = T, greater = "1" )
t_neat(rt_probe,rt_irr, pair = T, for_table = T, greater = "2" )
t_neat(rt_probe,rt_irr, pair = T, for_table = T, bf_added = T )
t_neat(rt_probe,rt_irr, pair = T, for_table = T, bf_added = N )
t_neat(rt_probe,rt_irr, pair = T, for_table = T, bf_added = F )
t_neat(rt_probe,rt_irr, pair = T, for_table = T, round_descr = 1 )
t_neat(rt_probe,rt_irr, pair = T, for_table = T, round_descr = 0 )
t_neat(rt_probe,rt_irr, pair = T, for_table = T, round_descr = 4 )
t_neat(rt_probe,rt_irr, pair = T, for_table = T, round_descr = 4, test_title = "hey there" )
t_neat(rt_probe,rt_irr, pair = T, for_table = T, round_descr = 4, test_title = "hey there", ci = .95 )
t_neat(rt_probe,rt_irr, pair = T,  round_descr = 4, test_title = "hey there", ci = .95 )
t_neat(rt_probe,rt_irr, pair = T,  round_descr = 4, test_title = "hey there", ci = .80 )
round(0.95)
round(0.95*100)
install("neatStats")
t_neat(rt_probe,rt_irr, pair = T,  round_descr = 4, test_title = "hey there", ci = .80 )
t_neat(rt_probe,rt_irr, pair = T,  round_descr = 4, test_title = "hey there", ci = .80 )
library("neatStats")
t_neat(rt_probe,rt_irr, pair = T,  round_descr = 4, test_title = "hey there", ci = .80 )
t_neat(rt_probe,rt_irr, pair = T, for_table = T, greater = "2" )
t_neat(rt_probe,rt_irr, pair = T, for_table = F, greater = "2" )
t_neat(rt_probe,rt_irr, pair = T, for_table = F, greater = "2", ci = .85 )
install("neatStats")
t_neat(rt_probe,rt_irr, pair = T,  round_descr = 4, test_title = "hey there", ci = .80 )
install("neatStats")
t_neat(rt_probe,rt_irr, pair = T, for_table = T, greater = "1" )
install("neatStats")
t_neat(rt_probe,rt_irr, pair = T, for_table = F, greater = "2", ci = .85 )
t_neat(rt_probe,rt_irr, pair = T,  round_descr = 4, test_title = "hey there", ci = .80 )
install("neatStats")
library("neatStats")
t_neat(rt_probe,rt_irr, pair = T,  round_descr = 4, test_title = "hey there", ci = .80 )
t_neat(rt_probe,rt_irr, pair = T, for_table = T, greater = "1" )
t_neat(rt_probe,rt_irr, pair = T, for_table = F, greater = "2", ci = .85 )
t_neat(rt_probe,rt_irr, pair = T,  round_descr = 4, test_title = "hey there", ci = .80 )
t_neat(rt_probe,rt_irr, pair = T,  round_descr = 4, test_title = "hey there", ci = .95 )
t_neat(rt_probe,rt_irr, pair = T, for_table = F, greater = "2", ci = .95 )
install("neatStats")
anova_apa(rt_anova)
sal_long <- melt(full_data, measure.vars = c("rt_mean_diffs_countries","rt_mean_diffs_animals"), variable.name = "item_types", value.name = "values" )
sal_long$guilt = as.factor( ifelse( sal_long$condition %in% list(0,1,2), "guilty", "innocent") )
sal_long$version = as.factor( ifelse( sal_long$condition %in% list(0,3), "simple", ifelse( sal_long$condition %in% list(1,4), "enhanced", "notarget") ) )
sal_long$subject_id = as.factor( tolower( as.character( sal_long$subject_id ) ) )
sal_long$item_types = as.factor( tolower( as.character( sal_long$item_types ) ) )
library(roxygen2)
document()
setwd( paste0( script_path(), '/neatStats')  )
document()
anovaBF
BayesFactor::
setwd( 'C:/research/proj_neatstats/' )
install("neatStats")
neatStats::anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id",  between_vars = "guilt, version",  within_vars = "item_types", bf_added = F )
install("neatStats")
neatStats::anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id",  between_vars = "guilt, version",  within_vars = "item_types", bf_added = F )
install("neatStats")
setwd( paste0( script_path(), '/neatStats')  )
document()
BayesFactor::
setwd( 'C:/research/proj_neatstats/' )
install("neatStats")
neatStats::anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id",  between_vars = "guilt, version",  within_vars = "item_types", bf_added = F, ci = .15 )
neatStats::anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id",  between_vars = "guilt, version",  within_vars = "item_types", bf_added = F, ci = .95 )
install("neatStats")
neatStats::anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id",  between_vars = "guilt, version",  within_vars = "item_types", bf_added = F, ci = .95, test_title = "MY TITLE" )
neatStats::anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id",  between_vars = "guilt, version",  within_vars = "item_types", bf_added = F, ci = 90, test_title = "MY TITLE" )
neatStats::anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id",  between_vars = "guilt, version",  within_vars = "item_types", bf_added = F, ci = .90, test_title = "MY TITLE" )
neatStats::anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id",  between_vars = "guilt, version",  within_vars = "item_types", bf_added = F, ci = .95, test_title = "MY TITLE" )
neatStats::anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id",  between_vars = "guilt, version",  within_vars = "item_types", bf_added = F, ci = .99, test_title = "MY TITLE" )
neatStats::anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id",  between_vars = "guilt, version",  within_vars = "item_types", bf_added = F, ci = .15, test_title = "MY TITLE" )
install("neatStats")
neatStats::anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id",  between_vars = "guilt, version",  within_vars = "item_types", bf_added = F, ci = .15, test_title = "MY TITLE" )
install("neatStats")
neatStats::anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id",  between_vars = "guilt, version",  within_vars = "item_types", bf_added = F, ci = .15, test_title = "MY TITLE" )
neatStats::anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id",  between_vars = "guilt, version",  within_vars = "item_types", bf_added = T, ci = .85, test_title = "MY TITLE" )
neatStats::anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id",  between_vars = "guilt, version",  within_vars = "item_types", bf_added = T, ci = .95, test_title = "MY TITLE" )
neatStats::anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id",  between_vars = "guilt, version",  within_vars = "item_types", bf_added = T, ci = .90, test_title = "MY TITLE" )
neatStats::anova_neat(data_long = "sal_long", value_col = "values", id_col = "subject_id",  between_vars = "guilt, version",  within_vars = "item_types", bf_added = T, ci = .89, test_title = "MY TITLE" )
?t_neat
t_neat
?t_neat
help(t_neat)
help("t_neat")
?neatStats
??neatStats
library('devtools')
library(roxygen2)
setwd( paste0( script_path(), '/neatStats')  )
document()
install("neatStats")
BayesFactor::
setwd( 'C:/research/proj_neatstats/' )
install("neatStats")
neatStats::t_neat()
t_neat(rt_probe,rt_irr, pair = T, for_table = T, greater = "1" )
library('devtools')
library(roxygen2)
setwd( paste0( script_path(), '/neatStats')  )
document()
library('devtools')
library(roxygen2)
setwd( paste0( script_path(), '/neatStats')  )
document()
setwd( paste0( script_path(), '/neatStats')  )
document()
library('devtools')
library(roxygen2)
setwd( paste0( script_path(), '/neatStats')  )
document()
document()
document()
document()
document()
